#!/usr/bin/env perl

# Created on: 2011-02-26 11:08:13
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Alt qw/get_options/;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use JSON::XS qw/decode_json/;
use Path::Tiny;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    out     => undef,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

main();
exit 0;

sub main {

    my $opt = get_options(
        {
            default => \%option,
            helper  => 1,
            bundle  => 1,
        },
        [
            'clean|c',
            'verbose|v+',
        ],
    );

    # do stuff here
    my $file = shift @ARGV;
    my $json;

    if ( $file && -f $file ) {
        $json = path($file)->slurp;
    }
    elsif ( $file ) {
        $json = $file;
    }
    else {
        while ( my $line = <>) {
            $json .= $line;
            last if $line eq "\n";
        }
        chomp $json;
    }

    my $perl = eval { decode_json($json) };
    my $e = $@;

    if ($e) {
        my $retry_json = $json;
        $retry_json =~ s/\n//gxms;

        my $retry = eval { decode_json($retry_json) };
        if (!$@) {
            $json = $retry_json;
            $perl = $retry;
            undef $e;
        }
        else {
            warn $@;
        }
    }

    if ( $e ) {
        print "There was an error in the JSON: $e";
    }
    else {
        print "JSON OK";
    }

    if ( $opt->{clean} ) {
        indent($json);
        $json =~ s/ ^ ( [{[] ) /$1\n/xms;
        $json =~ s/ (\S) ( [{}[\]] ) /$1\n$2\n/gxms;
        $json =~ s/ , /,\n/gxms;
        $json =~ s/ ([}\]]) \n , $ /$1,/gxms;
        $json =~ s/\n\n/\n/gxms;
        print "$json\n";
    }

    return;
}

sub indent {
#    my ($json) = @_;
#
#    #(?:[{](?:(?:(?>[^{}]+|(?1))+))[}])
#    # [{]"\\w\\w\\w:\\w+Request":(?:[{](?:(?:(?>[^{}]+|(?1))+))[}])[^}]*[}]
#    my ( $start, $middle, $end )
#        = $json =~ /
#        (?:[{](?:(?:(?>[^{}]+|(?1))+))[}])
#        /xmsi;#, $json, 3;
#    print join "\n", '', $start, $middle, $end, '', '';
}

__DATA__

=head1 NAME

validate_json - Try to validate a JSON file

=head1 VERSION

This documentation refers to validate_json version 0.1.

=head1 SYNOPSIS

   validate_json [option]

 OPTIONS:
  -o --other         other option

  -v --verbose       Show more detailed option
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for validate_json

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2011 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW, Australia 2077)
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
