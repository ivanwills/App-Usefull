#!/usr/bin/env perl

# Created on: 2009-10-23 11:09:25
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Carp qw/carp croak cluck confess longmess/;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Config::General;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {
    my (@cmd_args, @prog_args);
    # get this program's arguments from the supplied arguments
    while (@ARGV) {
        my $arg = shift @ARGV;
        if (@cmd_args || $arg !~ /^-/) {
            push @cmd_args, $arg;
        }
        else {
            push @prog_args, $arg;
        }
    }
    my $name    = shift @cmd_args;
    my $sub_cmd = shift @cmd_args;
    @ARGV = @prog_args;

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'test|t!',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $conf_file = "$ENV{HOME}/.cmdaliaser/$name.conf";
    if (!-f $conf_file || !-s $conf_file) {
        `mkdir "$ENV{HOME}/.cmdaliaser"` if !-d "$ENV{HOME}/.cmdaliaser";

        my $cmd = $sub_cmd ? $sub_cmd : 'eg';
        warn "Unknown command $name\n";
        warn "Create the file $conf_file and put you alias info in there\nE.g.\n";
        open my $fh, '>', $conf_file or die "Could not create the config file '$conf_file': $!\n";

        print {$fh} <<"EXAMPLE";
# Aliases for the $name command

# optional name of program
command = $name

# This specifies that the output should be checked for length and if it is more
# than one screen length long then the pager supplied is uesd. If the value is
# set to 'yes' the environment variable \$PAGER is used
#pager = yes | more | less
# to turn off the pager use no
#pager = no
pager = yes

# Use $cmd as an alias for a longer command
# Note: cmdaliser will recurse sub commands (if aliases exist) but only once
#       for any particular sub command
<alias $cmd>

#   The command alias
    sub = $cmd

#   This specifies post processing commands placed after the pipe (|)
#   post = grep blah

#   Any pre processing commands, placed before an and (&&)
#   pre = time

#   This allows the overriding of pager on a per alias basis the values that
#   it takes are the same as for the global pager setting.
#   pager = no

</alias>
EXAMPLE
    }

    my $conf = Config::General->new($conf_file);
    my %conf = $conf->getall();

    my $alias = join ' ', $sub_cmd, map {shell_quote($_)} @cmd_args;
    my $pre;
    my $pre_perl;
    my $post;
    my $post_cmd = '';
    my $pager;
    my %found;

    if ( exists $conf{dir} ) {
        # get the first file/dir from the arguments or the current directory
        my ($dir) = grep {-e $_} @cmd_args, '.';
        $dir = -f $dir ? file($dir)->parent : dir($dir);
        $dir = $dir->absolute->resolve;
        my $found;
        for my $conf_dir (keys %{ $conf{dir} } ) {
            if ( $dir =~ /^$conf_dir/ ) {
                $found = length $found < length $conf_dir ? $conf_dir : $found;
            }
        }
        if ($found) {
            # overright any defaul configs with directory specific configs
            %conf = ( %conf, %{ $conf{dir}{$found} } );
        }
    }

    my $command;
    while ($sub_cmd && exists $conf{alias}{$sub_cmd} && !$found{$sub_cmd}) {
        if (ref $conf{alias}{$sub_cmd} eq 'ARRAY') {
            warn "You have specified $sub_cmd too many times in your config file!\n";
            return;
        }
        $found{$sub_cmd} = 1;
        my $aliased = exists $conf{alias}{$sub_cmd}{sub} ? $conf{alias}{$sub_cmd}{sub} : $sub_cmd;
        $alias =~ s/^\s*$sub_cmd/$aliased /xms;

        if ($conf{alias}{$sub_cmd}{pre_cmd}) {
            system $conf{alias}{$sub_cmd}{pre_cmd};
        }
        if ($conf{alias}{$sub_cmd}{post_cmd}) {
            $post_cmd .= "; $conf{alias}{$sub_cmd}{post_cmd}"
        }
        if ($conf{alias}{$sub_cmd}{pre}) {
            $pre &&= "$pre | ";
            $pre  .= $conf{alias}{$sub_cmd}{pre};
        }
        if ($conf{alias}{$sub_cmd}{post}) {
            $post &&= "$post | ";
            $post  .= $conf{alias}{$sub_cmd}{post};
        }
        $pre_perl ||= $conf{alias}{$sub_cmd}{pre_perl};
        $pager    ||= $conf{alias}{$sub_cmd}{pager};
        $command  ||= $conf{alias}{$sub_cmd}{command};

        if ($sub_cmd) {
            ($sub_cmd) = $alias =~ /^\s*(\S+)\s/xms;
        }
    }

    $name = $command || $conf{command} || $name;

    if ($pre_perl) {
        my $pre_sub = eval("sub { $pre_perl }");
        if ($pre_sub && ref $pre_sub eq 'CODE') {
            return if !$pre_sub->();
            die "pre returned " . $pre_sub->() . "\n" if $option{test};
        }
        else {
            warn "Error in evaluating:\n$pre_perl";
        }
    }

    my $cmd = join ' ', $name, $alias;
    $cmd .= " | $post" if $post;
    $cmd .= $post_cmd  if $post_cmd;

    $pager ||= $conf{pager};
    $pager = $ENV{PAGER} if $pager && $pager eq 'yes';
    undef $pager if $pager && $pager eq 'no';
    print "$cmd\n" if $option{verbose} || $option{test};

    if ( !$option{test} ) {
        if ($pager) {
            exec "$cmd | $pager";
        }
        else {
            exec $cmd;
        }
    }

    return;
}

sub shell_quote {
    my ($text) = @_;

    if ($text =~ /[\s$|><;#]/xms) {
        $text =~ s/'/'\\''/gxms;
        $text = "'$text'";
    }

    return $text;
}

__DATA__

=head1 NAME

cmdaliaser - Allows the creating of aliases for sub commands of other programs (eg svn, cvs, net, etc)

=head1 VERSION

This documentation refers to cmdaliaser version 0.1.

=head1 SYNOPSIS

   cmdaliaser [option] cmd [cmd options]

 OPTIONS:
  cmd                This is the name of the alias file to use (and usually the program it is based on eg svn)
  -t --test          Test what would happen if the command was run (shows the command as would be executed)

  -v --verbose       Show more detailed option
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for cmdaliaser

=head1 DESCRIPTION

=head2 Config files

The config files are stored in the directory C<~/.cmdaliaser/>. There is one config file per program to be aliased named I<program>.conf eg for svn it would be C<svn.conf>

=over 4

=item command

The name of the executable to run

=item <alias I<alias>>

An alias command name (I<alias>). This may contain the following sub parameters

=over 4

=item sub

=item post

=item pre

=item pager


=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2009 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
