#!/usr/bin/perl

# Created on: 2016-09-09 07:45:35
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use English qw/ -no_match_vars /;
use Path::Tiny;

our $VERSION = 0.01;
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    gulpfile => ['gulpfile.js'],
);

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'gulpfile|g=s@',
        'auto_complete|auto-complete',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{auto_complete} ) {
        return auto_complete();
    }
    elsif ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    push @ARGV, '' if !@ARGV;
    my @pids;

    for my $task (@ARGV) {
        if ($task =~ /^\d+/) {
            if ( $task eq '0' ) {
                # zero break waits for everything before it to finish
                while (shift @pids) {
                    wait;
                }
            }
            else {
                sleep $task;
            }
            next;
        }

        my $pid = fork;

        if ($pid) {
            push @pids, $pid;
            sleep 1;
            next;
        }

        exec "gulp $task";
    }

    for (@pids) {
        wait;
    }

    return;
}

sub auto_complete {
    my @tasks;

    for my $gulpfile (@{ $option{gulpfile} }) {
        next if !-f $gulpfile;

        for my $line (split /\n/, path($gulpfile)->slurp) {
            next if $line !~ /gulp[.]task\s*[(]\s*['"]([\w-]+)['"]/;

            push @tasks, $1;
        }
    }

    shift @ARGV if $ARGV[0] eq $PROGRAM_NAME;
    my $filter = $ARGV[0] && $ARGV[0] ne '--' ? $ARGV[0] : '';

    print join "\n", grep {/^$filter/} @tasks;
}

__DATA__

=head1 NAME

golp - A gulp helper to run multiple gulp command in parallel

=head1 VERSION

This documentation refers to golp version 0.0.1

=head1 SYNOPSIS

   golp [option] task1 [task2 ...]

 OPTIONS:
  task          The task(s) to execute, if the task is a number a sleep
                will be performed. If task is a number then the code will
                sleep for that many seconds unless it's zero when it will
                wait for previous tasks to finish.

     --gulpfile[=]file
                Add extra gulpfiles to help with auto completion
     --auto-complete
                For use by a shell atuo completion function

  -v --verbose  Show more detailed option
     --version  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for golp

  e.g.
    # the following would run the compile-javascript and compile-scss tasks
    # then wait till they finish and run the test task
    golp compile-javascript compile-scss 0 test

    # This shows more complex tasks where one task needs extra arguments
    golp task1 'task2 extra=1'

=head1 DESCRIPTION

The gulp command will only run one task at a time C<golp> allows you to
temporarily construct new tasks which can be executed in parallel.

=head2 Auto Completion

eg for bash

    _golp() {
        COMPREPLY=($(golp --gulpfile node_modules/lux-core/gulpTasks.js --auto-complete ${COMP_WORDS[1]} -- ${COMP_WORDS[@]}))
    }
    complete -F _golp golp

Also you can you use this to help with auto completing raw gulp, eg:

    complete -F _golp gulp

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2016 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
