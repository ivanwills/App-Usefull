#!/usr/bin/perl

# Created on: 2013-04-15 08:37:56
# Create by:  dev
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use v5.12;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Class;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    out     => undef,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'ports|p=i@',
        'host|h=s',
        'server|s=s',
        'test|t!',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    if ( @{ $option{ports} } == 0 ) {
        warn "No ports specified!\n";
        pod2usage( -verbose => 1 );
    }
    elsif ( @{ $option{ports} } == 1 ) {
        $option{ports}[1] = $option{ports}[0];
    }
    elsif ( @{ $option{ports} } > 2 ) {
        warn "You can only specify 1 or 2 ports!\n";
        pod2usage( -verbose => 1 );
    }

    $option{host} ||= shift @ARGV;

    my %checked;
    for my $type (qw/-L -R/) {
        for my $ports ( $option{ports}, [reverse @{ $option{ports} }] ) {
            for my $server ( $option{server}, 'localhost' ) {
                next if !$server;
                my $cmd = sprintf "ssh -t -A %s %i:%s:%i %s", $type, $ports->[0], $server, $ports->[1], $option{host};
                next if $checked{$cmd}++;
                say $cmd;
                system $cmd if !$option{test};
                say $cmd if !$option{test};
            }
        }
    }


    return;
}

__DATA__

=head1 NAME

ssh-forwards - Show all possible port forward combinations

=head1 VERSION

This documentation refers to ssh-forwards version 0.1.

=head1 SYNOPSIS

   ssh-forwards [option] host
   ssh-forwards [option] (-h|--host) host

 OPTIONS:
  -p --ports[=]int   Ports to use (may be specifed once or twice)
  -h --host[=]str    Remote host sshing to
  -s --server[=]str  Remote (or localhost) host who's ports are to be forwarded (optional)
  -t --test          Test don't run ssh

  -v --verbose       Show more detailed option
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for ssh-forwards

=head1 DESCRIPTION

Eg:

 $ ssh-forwards -t -p 2222 -p 3333 -h faraway.com

 ssh -t -A -L 2222:localhost:3333 faraway.com
 ssh -t -A -L 3333:localhost:2222 faraway.com
 ssh -t -A -R 2222:localhost:3333 faraway.com
 ssh -t -A -R 3333:localhost:2222 faraway.com

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2013 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW, Australia 2077)
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
