#!/usr/bin/env perl

# Created on: 2011-03-02 15:07:46
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Class;
use WWW::Mechanize;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    max_redirect => 10,
    verbose      => 0,
    man          => 0,
    help         => 0,
    VERSION      => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'out|o=s',
        'content|c=s',
        'proxy|p=s%',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $url  = shift @ARGV;
    my $mech = WWW::Mechanize->new;

    if ( $option{proxy} ) {
        for my $protocol ( keys %{ $option{proxy} } ) {
            $mech->proxy( $protocol => $option{proxy}{$protocol} );
        }
    }

    if ( $option{content} ) {
        my $content
            = $option{content} eq '-'
            ? do { local $/; <> }
            : file($option{content})->slurp;

        eval { $mech->put($url, content => $content) };
    }
    else {
        eval { $mech->get($url) };
        my $count = 0;
        while ( ( $mech->status eq 302 || $mech->status eq 301 ) && $count < $option{max_redirect} ) {
            sleep 1;
            warn "Redirecting to " . $mech->{redirected_uri} . "\n";
            $count++ if $mech->{redirected_uri} eq $url;

            eval { $mech->get($mech->{redirected_uri}) };
            $count++;
        }
    }
    if ($@) {
        #print $@;
        print "Error " . ( $option{content} ? 'PUT' : 'GET' ) . 'ing ' . $mech->uri . ': ' . $mech->res->code . ' ' . $mech->res->message . "\n";
    }
    print "Content:\n" if $option{verbose};
    print defined $mech->content ? $mech->content : '(No content)';
    print "\n";
    print "\n" . Dumper $mech if $option{verbose} > 1;

    return;
}

__DATA__

=head1 NAME

myget - Gets web pages and writes the output to STDOUT

=head1 VERSION

This documentation refers to myget version 0.1.

=head1 SYNOPSIS

   myget [option] URL

 OPTIONS:
  -o --other         other option

  -v --verbose       Show more detailed option
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for myget

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2011 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW, Australia 2077)
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
