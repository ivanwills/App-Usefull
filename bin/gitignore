#!/usr/bin/perl

# Created on: 2016-09-24 07:55:00
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Tiny;
use JSON::XS qw/decode_json/;
require CHI;
require WWW::Mechanize::Cached;
require HTTP::Tiny::Mech;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    out     => -f '.gitignore' ? undef : '.gitignore',
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}
my $mech = WWW::Mechanize::Cached->new(
    cache => CHI->new(
        driver   => 'File',
        root_dir => "/tmp/$name",
    ),
);

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'out|o=s',
        'append|a',
        'auto-complete',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'auto-complete'} ) {
        return autocomplete();
    }
    elsif ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $url = 'https://www.gitignore.io/api/'; # node%2Cvim
    $url .= join '%2C', @ARGV;

    $mech->get($url);
    my $ignore = $mech->content();
    my $file = path($option{out});

    if ($option{append}) {
        $file->spew($file->slurp . $ignore);
    }
    elsif ($option{out}) {
        $file->spew($ignore);
    }
    else {
        print $ignore;
    }

    return;
}

sub autocomplete {
    my $url = 'https://www.gitignore.io/dropdown/templates.json';
    $mech->get($url);
    my $json = decode_json($mech->content());
    my @type = map { $_->{id} } @{ $json };

    print join "\n", sort grep {@ARGV ? /^$ARGV[-1]/ : 1} @type;
}

__DATA__

=head1 NAME

gitignore - Generate gitignore file using gitignore.io

=head1 VERSION

This documentation refers to gitignore version 0.0.1

=head1 SYNOPSIS

   gitignore [option]

 OPTIONS:
  -o --out[=]file   Output to file

  -v --verbose      Show more detailed option
     --version      Prints the version information
     --help         Prints this help information
     --man          Prints the full documentation for gitignore

=head1 DESCRIPTION

=head2 Auto-complete

To help use this add the following to your C<~/.bashrc>

    _gitignore() {
        COMPREPLY=($(gitignore --auto-complete ${COMP_WORDS[1]} -- ${COMP_WORDS[@]}))
    }
    complete -F _gitignore gitignore

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2016 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
