#!/usr/bin/env perl

# Created on: 2009-06-22 11:06:55
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Proc::ProcessTable;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    count   => 20,
    cols    => [qw/pid ttydev pctcpu state start cmndline/],
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

my %cols = (
    cmajflt  => 'cmajflt',
    cminflt  => 'cminflt',
    cmndline => 'COMMAND',
    cstime   => 'cstime',
    ctime    => 'ctime',
    cutime   => 'cutime',
    cwd      => 'cwd',
    egid     => 'egid',
    euid     => 'euid',
    exec     => 'exec',
    fgid     => 'fgid',
    flags    => 'flags',
    fname    => 'fname',
    fuid     => 'fuid',
    gid      => 'GID',
    majflt   => 'majflt',
    minflt   => 'minflt',
    pctcpu   => '%CPU',
    pctmem   => '%MEM',
    pgrp     => 'pgrp',
    pid      => 'PID',
    ppid     => 'ppid',
    priority => 'priority',
    rss      => 'rss',
    sess     => 'sess',
    sgid     => 'sgid',
    size     => 'size',
    start    => 'START',
    state    => 'STAT',
    stime    => 'stime',
    suid     => 'suid',
    time     => 'time',
    ttydev   => 'TTY',
    ttynum   => 'ttynum',
    uid      => 'UID',
    utime    => 'utime',
    wchan    => 'wchan',
);

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'count|n',
        'cpu|c',
        'mem|m',
        'cols|columns|c=s@',
        'verbose|v+',
        'man',
        'help',
        'version',
    ) or pod2usage(2);

    if ( $option{'version'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my %max   = map { $_ => length $_ } keys %cols;
    my $procs = Proc::ProcessTable->new;
    my %top;

    my $type =
          $option{cpu} ? sub { $b->pctcpu eq 'nan' ? 1 : $a->pctcpu eq 'nan' ? -1 : $b->pctcpu <=> $a->pctcpu }
        : $option{mem} ? sub { $b->pctcpu eq 'nan' ? 1 : $a->pctcpu eq 'nan' ? -1 : $b->mem    <=> $a->mem    }
        :                sub { $b->pctcpu eq 'nan' ? 1 : $a->pctcpu eq 'nan' ? -1 : $b->pctcpu <=> $a->pctcpu };

    my @procs;
    my $count = 1;

    PROC:
    for my $proc ( sort $type @{$procs->table} ) {
        push @procs, $proc;

        KEY:
        for my $key ( keys %{ $proc } ) {
            my $value = $proc->{$key};

            next KEY if !defined $value;

            $value = scalar length $value if $key eq 'start';

            $max{$key} = length $value if length $value > $max{$key};
        }

        last PROC if $count++ > $option{count};
    }

    #my $fmt = "%-6s %-10s %-8s %-8s %-24s %s\n";
    my $fmt = '%-' . ( join 's %-', map { $max{$_} } @{ $option{cols} } ) . "s\n";
    printf $fmt, map { $cols{$_} } @{ $option{cols} };

    for my $proc (@procs) {
        my @cols;

        KEY:
        for my $key ( @{ $option{cols} } ) {
            my $value = $proc->{$key};

            $value = scalar length $value if $key eq 'start';

            push @cols, $value;
        }

        printf $fmt, @cols;
    }
    return;
}

__DATA__

=head1 NAME

itop - top I

=head1 VERSION

This documentation refers to itop version 0.1.

=head1 SYNOPSIS

   itop [option]

 OPTIONS:
  -o --other         other option

  -v --verbose       Show more detailed option
     --VERSION       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for itop

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2009 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
