#!/usr/bin/perl

# Created on: 2018-05-10 07:48:34
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Tiny;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    number  => 10,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'number|n=i',
        'uniq|u!',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $root = `git rev-parse --show-toplevel`;
    chomp $root;
    open my $fh, '<', "$root/.git/branch.log" || die "Could not open '$root/.git/branch.log' : $!\n";
    my @history;

    while (my $history = <$fh>) {
        chomp $history;
        my ($date, $time, $branch) = split /\s/, $history, 3;
        push @history, [ $date, $time, $branch ];
    }

    if ($option{uniq}) {
        my @uniq;
        my %branches;
        while (@uniq < $option{number} && @history) {
            my $item = pop @history;
            if ( $branches{$item->[2]}++ ) {
                next;
            }
            unshift @uniq, $item;
        }
        @history = @uniq;
    }

    # don't try to show more history than exists
    $option{number} = $#history if $option{number} > $#history;

    print join "\n", (map {join ' ', @$_} @history[ $#history - $option{number} .. $#history ]), '';

    return;
}

__DATA__

=head1 NAME

git-branch-history - <One-line description of commands purpose>

=head1 VERSION

This documentation refers to git-branch-history version 0.0.1

=head1 SYNOPSIS

   git-branch-history [option]

 OPTIONS:
  -n --number[=]int
                Limit shown history to this number of branches
  -n --uniq     Only show a unique history of branches

  -v --verbose  Show more detailed option
     --version  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for git-branch-history

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2018 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
