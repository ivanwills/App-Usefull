#!/usr/bin/env perl

# Created on: 2009-07-15 12:54:35
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use List::MoreUtils qw/uniq/;
use Getopt::Alt qw/get_options/;
use List::MoreUtils qw/uniq/;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use File::Find;
use Path::Tiny;
use File::TypeCategories;
use Config::Any;
use Hash::Merge qw/merge/;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    schema  => 'lib/MyApp/DB',
    max     => 12,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

main();
exit 0;

sub main {

    my ($opt) = get_options(
        {
            bundle        => 1,
            help          => 1,
            default       => {%option},
            auto_complete => \&auto,
        },
        [
            'schema|s=s',
            'max|m=i',
            'test|t!',
            'list|l',
            'tags|T!',
            'title',
            'o',
            'O',
            'R',
            'note|n!',
            'name|N=s',
            'find|f',
            'auto_complete|auto-complete',
            'verbose|v+',
        ],
    );
    %option = %$opt;

    # do stuff here
    create_tags();
    my $conf = config();

    my @options = @ARGV ? @ARGV : ('perl');
    my $title = $options[0];
    my @files;

    if ($option{title}) {
        require Term::Title;
        Term::Title::set_titlebar($title);
    }

    for my $file ( @options ) {
        push @files
            , -f $file          ? $file
            : $conf->{$file}    ? grep { ! -d $_ } map { glob $_ } @{ $conf->{$file} }
            : $file eq 'perl'   ? open_perl()
            : $file eq 'bin'    ? open_bin()
            : $file eq 'lib'    ? open_lib()
            : $file eq 'test'   ? open_tests()
            : $file eq 'tests'  ? open_tests()
            : $file =~ /templ/  ? open_templates()
            : $file eq 'static' ? ( open_css(), open_js() )
            : $file eq 'css'    ? open_css()
            : $file eq 'js'     ? open_js()
            : $file eq 'db'     ? open_database()
            : $file eq 'all'    ? ( open_perl(), open_templates(), open_database() )
            : $opt->find        ? open_found($file)
            : -d $file          ? open_dir($file)
            :                     $file;
    }
    die "Could not find any files!\n" if !@files;

    if ( $opt->list ) {
        print join "\n", uniq @files, '';
        return;
    }

    if ($opt->name || $opt->note) {
        note($opt->name || 'note', @files);
    }

    set_env();

    my @cmd = qw/vim/;
    for (qw/o O R/) {
        push @cmd, "-$_" if $opt->$_;
    }
    push @cmd, uniq @files;

    warn join ' ', @cmd, "\n" if $option{verbose} || $option{test};
    exec @cmd if !$option{test};

    return ;
}

sub config {
    my $confs = Config::Any->load_stems({
        stems   => [ qw/vrc .vrc/, "$ENV{HOME}/.vrc", "/etc/vrc" ],
        use_ext => 1,
    });
    my $conf = {};
    for my $config ( reverse @{$confs} ) {
        for my $file ( values %$config ) {
            $conf = merge( $conf, $file );
        }
    }

    # get current branch (if one)
    my $branch = eval { path('.git/HEAD')->slurp };
    if ( $branch ) {
        chomp $branch;
        $branch =~ s/^.*?(\w+)\n?$/$1/;

        # merge branch specific key into main conf
        if ( $conf->{$branch} && ref $conf->{$branch} ) {
            for my $key ( keys %{ $conf->{$branch} } ) {
                $conf->{$key} = $conf->{$branch}{$key};
            }
        }
    }

    return $conf;
}

my $tc;
sub auto {
    my ($opt, $auto) = @_;

    my $branch = path('.git/HEAD');
    if (-f $branch) {
        $branch = $branch->slurp;
        chomp $branch;
    }

    my $conf = config();
    my @auto = sort +(
        qw/perl lib test templ static css js db all/,
        (grep {ref $conf->{$_} ne 'HASH'} keys %$conf),
        keys %{ $conf->{$branch} }
    );

    if ( @ARGV > 1 ) {
        @auto = grep {/^$ARGV[-1]/} @auto;
    }

    if (!@auto) {
        $tc ||= File::TypeCategories->new(%option);
        my $base = $ARGV[-1];
        if ($base =~ m{/}) {
            $base =~ s{/[^/]*$}{};
        }
        else {
            $base = '.';
        }

        for my $file (path($base)->children) {
            next if $file !~ m{^$ARGV[-1]};
            push @auto, -d $file ? "$file/" : "$file";
        }
    }

    print join " ", sort @auto;
}

sub open_perl {
    my @files;
    my %dirs = (
        bin     => { order => 1, extension => 0 },
        script  => { order => 2, extension => 0 },
        lib     => { order => 2, extension => 1 },
        example => { order => 5, extension => 0 },
        eg      => { order => 6, extension => 0 },
        helper  => { order => 7, extension => 0 },
        t       => { order => 3, extension => 1 },
        tx      => { order => 4, extension => 1 },
    );
    $tc = File::TypeCategories->new( include_type => [qw/perl test/] );

    for my $dir ( sort { $dirs{$a}{order} <=> $dirs{$b}{order} } keys %dirs ) {
        warn "Dir $dir\n" if $option{verbose} && $option{verbose} > 1;
        next if !-d $dir;
        last if @files > $option{max};

        my @children = path($dir)->children;

        while (my $file = shift @children) {
            print {*STDERR} "  Found $file" if $option{verbose} && $option{verbose} > 2;
            if (-d $file) {
                if ( $file =~ m{ /.(?: svn | bzr | git ) | CVS | RCS }xms ) {
                    print {*STDERR} "\n" if $option{verbose} && $option{verbose} > 2;
                    next;
                }

                push @children, $file->children;
            }
            else {
                if ( !$tc->file_ok($file) ) {
                    print {*STDERR} "\n" if $option{verbose} && $option{verbose} > 2;
                    next;
                }
                #next if $dirs{$dir}{extension} && $file !~ /[.] (?: pm | pl | pod | t ) $/xms;
                #next if $file =~ m{[.]sw[po]$};
                #next if -b $file;

                push @files, $file;
                warn "$file\n" if $option{verbose} && $option{verbose} <= 2;
                print {*STDERR} " OK" if $option{verbose} && $option{verbose} > 2;
            }
            print {*STDERR} "\n" if $option{verbose} && $option{verbose} > 2;
        }
    }

    return map {"$_"} @files;
}

sub open_tests {
    my @files;
    my %dirs = (
        t       => { order => 3, extension => 1 },
        tx      => { order => 4, extension => 1 },
    );

    for my $dir ( sort { $dirs{$a}{order} <=> $dirs{$b}{order} } keys %dirs ) {
        next if !-d $dir;
        last if @files > $option{max};

        my @children = path($dir)->children;

        while (my $file = shift @children) {
            warn "Found $file\n" if $option{verbose} && $option{verbose} > 1;
            if (-d $file) {
                next if $file =~ m{ /.(?: svn | bzr | git ) | /CSV }xms;

                push @children, $file->children;
            }
            else {
                next if $dirs{$dir}{extension} && $file !~ /[.] (?: pm | pl | pod | t ) $/xms;
                next if $file =~ m{[.]sw[po]$};
                next if -b $file;

                push @files, $file;
                warn "$file\n" if $option{verbose};
            }
        }
    }

    return map {"$_"} @files;
}

sub open_bin       { return open_general( [qw{ bin                                                                }],                           ); }
sub open_lib       { return open_general( [qw{ lib                                                                }], [qr{ [.](?:pm|pod)$ }xms], [qr{ lib/perl5 }xms] ); }
sub open_templates { return open_general( [qw{ template templates root html views                                 }]); }
sub open_css       { return open_general( [qw{ css public/css root/css                                            }], [qr{ [.]css$        }xms] ); }
sub open_js        { return open_general( [qw{ js javascript public/js public/javascripts root/js root/javascript }], [qr{ [.]js$         }xms] ); }

sub open_general {
    my ($dirs, $matches, $excludes) = @_;
    my @files;

    DIR:
    for my $dir (@$dirs) {
        next if !-d $dir;
        warn "$dir\n" if $option{verbose};
        my @children = path($dir)->children;

        FILE:
        while (my $file = shift @children) {
            if (-d $file) {
                next FILE if $file =~ /(?: [.] (?: svn | git | bzr ) | CVS | RCS ) $/xms;
                push @children, $file->children;
            }
            elsif (-B $file) {
                next FILE;
            }
            else {
                next FILE if $file =~ m{ [.] (?: sw[po] | png | gif | jpe?g ) $}xms;
                next FILE if $file =~ /jquery/;
                next FILE if -b $file;
                next FILE if $matches && !grep {$file =~ /$_/} @$matches;
                next FILE if $excludes && grep {$file =~ /$_/} @$excludes;
                push @files, $file;
            }
        }
    }

    return map {"$_"} @files;
}

sub open_database {
    my @files;

    for my $dir ('db', $option{schema}) {
        find(
            sub {
                return if -d $_ || !/[.] (?: pm | sql | plsql ) $/xms;

                my ($file) = $File::Find::name;
                $file =~ s{^(.*)/$dir}{$dir}xms;

                push @files, $file;
            },
            $dir
        );
    }

    return @files;
}

sub open_found {
    my $file = shift;
    $tc ||= File::TypeCategories->new(%option);
    my @found;
    find(
        sub {
            return if -d $_ || $tc->types_match($File::Find::name, 'ignore');
            push @found, $File::Find::name if $File::Find::name =~ /$file/;
        },
        '.'
    );

    if ( @found != 1 ) {
        if (!@found) {
            warn "No match for $file\n";
        }
        else {
            warn "'$file' matched " . (join ', ', @found) . "\n";
        }
    }

    return @found;
}

sub open_dir {
    my @files = @_;
    my @found;

    while ( my $file = shift @files ) {
        if (-d $file) {
            push @files, sort ( path($file)->children );
        }
        else {
            push @found, "$file";
            last if @files > $option{max};
        }
    }

    return @found;
}

sub create_tags {
    my $tag = path('/usr', 'bin', 'ctags');
    if ( $option{tags} && -x $tag ) {
        my @exclude = qw/blib _build Build tmp/;
        my $cmd = "$tag -R --exclude=" . join ' --exclude=', @exclude;
        warn "$cmd\n" if $option{verbose} || $option{test};
        system $cmd if !$option{test};
    }
}

sub set_env {
    my @libs = split ':', $ENV{PERL5LIB} || '';
    push @libs, 'lib' if -d 'lib';
    push @libs, 't/lib' if -d 't/lib';
    $ENV{PERL5LIB} = join ':', @libs;
}

sub note {
    my ($name, @files) = @_;
    my $config_file = 'vrc.yml';
    my $config = {};

    if ( !@files ) {
        warn "No files to note!\n";
        return;
    }

    $name ||= 'note';
    require YAML::Syck;

    if ( -f $config_file ) {
        $config = YAML::Syck::LoadFile($config_file);
    }

    my $location = $config;
    if ( -f '.git/HEAD' ) {
        my $head = path('.git/HEAD')->slurp;
        chomp $head;
        $head =~ s{.*/}{};
        $config->{$head} ||= {};
        $location = $config->{$head};
    }

    # make sure files are unique.
    @files = uniq @files;

    # add to note tag
    if ( $location->{$name} ) {
        my %old = map {$_=>1} @{ $location->{$name} };
        push @{ $location->{$name} }, grep { !$old{$_} } @files;
    }
    else {
        $location->{$name} = \@files;
    }

    YAML::Syck::DumpFile($config_file, $config);
    return;
}

__DATA__

=head1 NAME

v - Opens files in vim based on type and standard perl project directory hierarchy

=head1 VERSION

This documentation refers to v version 0.1.

=head1 SYNOPSIS

   v [option] [perl|templates|db|all]

 OPTIONS:
  {config}  - An option specified in the vrc.yml config file in the current
              directory (See Configuration section)
  perl      - Opens all .pl, .pm, .pod and .t fiels in the lib, bin and t
              directores. This is the default action
  test      - Opens all test files (*.t)
  templates - Opens all files in templates?, root, html data/templates directors
  db        - Opens all files in the db directory
  all       - Open all of the above files

  -l --list     List the files that will be opened
  -m --max=int  The maximum number of files to open before stopping
                opening files for other directories
  -s --schema[=]str
                Open files for the schema
  -T --tags     Create ctags file
     --title    Set the terminal title to the first file option
  -N --name[=]str
                Name a notes "str" (implies --note)
  -n --note     Add any extra files being opened to the saved config option
                (or create a note if one isn't specified)
  -f --find     Find any unmatched categories
  -o            vim -o
  -O            vim -O

  -t --test     Show the command that will be run
  -v --verbose  Show more detailed option
     --version  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for v

=head1 DESCRIPTION

The purpose of the C<v> script is to make opening bunches of files easier by
being able to store the lists of files in a configuration or by using the
predefined lists.

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

If you create a configuration file (either vrc.yml or .vrc.yml) in the current
directory, your home directory and/or /etc you can create your own lists of
files to open.

eg vrc.yml

    ----
    bin:
        - bin/one
        - bin/two
        - t/bin-one.t
    dist:
        - Changes
        - MANIFEST*
        - Build.PL

If you ran C<v bin> with this config vim would be run as

    vim bin/one bin/two t/bin-one.t

or C<v dist> would probably produce:

    vim Changes MANIFEST MANIFEST.SKIP Build.PL

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2009 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
