#!/usr/bin/perl

# Created on: 2025-01-01 13:44:45
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;

#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English      qw/ -no_match_vars /;
use FindBin      qw/$Bin/;
use Path::Tiny;
use File::Copy qw/copy/;
use Class::Date;

our $VERSION = version->new('0.0.1');
my ($name) = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    retry_max => 1,
    sleep     => 1,
    verbose   => 0,
    man       => 0,
    help      => 0,
    VERSION   => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,    'after|a=s',
        'retry|r',   'retry_max|retry-max|m=i',
        'sleep|s=i', 'verbose|v+',
        'test|t!',   'man',
        'help',      'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $dest = pop @ARGV;
    if ( !-d $dest ) {
        die "Destination must be a directory\n";
    }

    if ( $option{after} ) {
        $option{after} = Class::Date->new( $option{after} );
    }

    for my $file (@ARGV) {
        copy_date( $file, $dest );
    }

    return;
}

sub copy_date {
    my ( $file, $dest, $retries ) = @_;
    if ( !-f $file ) {
        warn "File $file does not exist\n";
        return;
    }
    if ( !-s $file ) {
        warn "File $file is empty, skipping!\n";
        return;
    }

    $retries ||= 0;
    my ($dev,  $ino,   $mode,  $nlink, $uid,     $gid, $rdev,
        $size, $atime, $mtime, $ctime, $blksize, $blocks
    ) = stat($file);
    my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst )
        = localtime($mtime);

    $year += 1900;
    $mon  += 1;

    return if $option{after} && $option{after} > Class::Date->new($mtime);
    my $location = sprintf( "%s/%04d/%02d/%02d", $dest, $year, $mon, $mday );
    mkdir_deep($location) if !-d $location;

    if ( $option{test} ) {
        warn "cp --preserve=all $file $location\n";
    }
    my $dest_name = path($location)->child( path($file)->basename );
    if ( -e $dest_name ) {
        if ( -s $dest_name == 0 || -s $file != -s $dest_name ) {
            unlink $dest_name;
        }
        else {
            warn "File already exists in $location\n" if $option{verbose} > 1;
            return;
        }
    }
    if ( !$option{test} ) {
        my $error = system 'rsync', '-a', $file, $location;

        #my $error = system 'cp', '--preserve=all', $file, $location;
        if ($error) {
            if ( $option{retry} && $option{retry_max} >= $retries ) {
                sleep $option{sleep} * 2;
                return copy_date( $file, $dest, $retries + 1 );
            }
            die "Error copying $file to $location\n";
        }
        if ( -s $file != -s $dest_name ) {
            die "File size does not match $file -> $dest_name\n";
        }
        else {
            warn "cp --preserve=all $file $location\n";
        }
    }
    else {
        warn "File already exists in $location\n";
    }
    sleep $option{sleep};
}

sub mkdir_deep {
    my ($dir) = @_;
    my @dirs  = split /\//, $dir;
    my $path  = '';
    for my $dir (@dirs) {
        $path .= $dir;
        mkdir $path if !-d $path;
        $path .= '/';
    }
}

__DATA__

=head1 NAME

cp-by-date - Copy files into date structured directories

=head1 VERSION

This documentation refers to cp-by-date version 0.0.1

=head1 SYNOPSIS

   cp-by-date [option]

 OPTIONS:
  -a --after[=]date  Only copy files after this date
  -r --retry         Retry copying files if there is an error
  -m --retryr-max[=]int
                     Retry at most this many times
  -s --sleep[=]sec   Sleep this many seconds between retries
  -t --test          Test mode, don't actually copy files

  -v --verbose       Show more detailed option
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for cp-by-date

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2025 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
