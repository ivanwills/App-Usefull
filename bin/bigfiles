#!/usr/bin/env perl

# Created on: 2008-09-09 05:12:44
# Create by:  ivan
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util qw/max/;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;

our $VERSION = version->new('0.0.1');
my ($name) = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    minsize  => 20,
    minfiles => 1,
    order    => 'name',
    verbose  => 0,
    man      => 0,
    help     => 0,
    VERSION  => 0,
);

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'minsize|min-size|s=i',
        'minfiles|min-files|f=i',
        'order|order-by|o=s',
        'limit|l=i',
        'skip|re|r=s',
        'verbose|v+',
        'man',
        'help',
        'version',
    ) or pod2usage(2);
    my $dir = shift @ARGV;

    if ($option{'version'}) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ($option{'man'}) {
        pod2usage(-verbose => 2);
    }
    elsif ($option{'help'}) {
        pod2usage(-verbose => 1);
    }

    # do stuff here
    $dir ||= '.';
    my @big_dirs = get_big_dirs($dir);

    my $order
        = $option{order} eq 'size'  ? sub { $a->{size}  <=> $b->{size}  }
        : $option{order} eq 'files' ? sub { $a->{files} <=> $b->{files} }
        :                             sub { $a->{dir}   cmp $b->{dir}   };

    my $max = max map { length $_->{dir} } @big_dirs;

    my $count = 0;
    DIR:
    for my $dir (reverse sort $order @big_dirs) {
        next if $option{skip} && $dir->{dir} =~ /$option{skip}/;
        last DIR if $option{limit} && $count++ > $option{limit};
        printf "%s%s %4d %6d\n", $dir->{dir}, ' ' x ($max - length $dir->{dir}), $dir->{files}, $dir->{size} / 1024 / 1024;
    }

    return;
}

sub get_big_dirs {

    my ($dir) = @_;

    opendir my $dirh, $dir or warn "Could not open '$dir': $OS_ERROR\n";
    my @files = readdir $dirh;
    closedir $dirh;

    my @big = ({ dir => $dir, size => 0, files => 0 });

    for my $file (@files) {
        next if $file eq '.' || $file eq '..';
        next if -l "$dir/$file";

        if (-d "$dir/$file") {
            push @big, get_big_dirs("$dir/$file");
        }
        elsif (-s "$dir/$file" > $option{minsize} * 1024) {
            $big[0]{size} += -s "$dir/$file";
            $big[0]{files}++;
        }
    }

    shift @big if $big[0]{files} < $option{minfiles};

    return @big;
}

__DATA__

=head1 NAME

bigfiles - Find all the big files in a directory

=head1 VERSION

This documentation refers to bigfiles version 0.1.

=head1 SYNOPSIS

   bigfiles [option] [$dir]

 OPTIONS:
  -s --min-size=int  The minimum size of file to count (in KB)
  -f --min-files=ing The minimum number of files in the directory to count
  -o --order-by=name|size|files
                     Specifys the ordering of the output

  -v --verbose       Show more detailed option
     --VERSION       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for bigfiles

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2008 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
