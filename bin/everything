#!/usr/bin/env perl

# Created on: 2009-08-26 14:22:24
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Getopt::Long;
use Pod::Usage;
use List::Util qw/sum/;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use VCS::Which;
use File::Slurp qw/slurp/;
use File::chdir;
use Term::ANSIColor qw/:constants colored/;
use Path::Class;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;
my $config   = "$ENV{HOME}/.pull-everything.rc";
$config = "$ENV{HOME}/.everything.rc" if !-f $config;

my %option = (
    verbose => 0,
    min     => 5,
    big     => 100,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'author|a!',
        'min|m=i',
        'big|b=i',
        'ordered|o!',
        'natural|n=f',
        'config|c=s',
        'tags|t',
        'force|f!',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);
    my $cmd = shift @ARGV;
    if ( $option{config} ) {
        $config
            = -f $option{config}
            ? $option{config}
            : $ENV{HOME} . "/.everything.$option{config}.rc";
        warn "Using config $config\n" if $option{verbose};
    }

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} || !$cmd || !-f $config || $cmd eq 'help' ) {
        warn "Config file '$config' is missing!\n" if !-f $config;
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    warn "Unknown command '$cmd'\n" if !main->can($cmd);
    if (!@ARGV) {
        @ARGV = grep { !/^\s*$/ && !/^\s*#/ } map { chomp; $_ } slurp $config;
    }
    my $vcs = VCS::Which->new;

    my @dirs;
    my $max = 0;
    LINE:
    for my $line (@ARGV) {
        if ( -d $line ) {
            $max = length $line if $max < length $line;
            push @dirs, $line;
            next LINE;
        }

        my @found = glob($line);
        for my $dir (@found) {
            $max = length $dir if $max < length $dir;
            push @dirs, $dir;
        }
    }

    for my $dir (@dirs) {
        next if !-d $dir;

        eval {
            no strict qw/refs/;  ## no critic
            $cmd->($vcs, $dir, $max);
        };
        if ($@ && $option{verbose}) {
            print "$dir\n";
            print $@ if $option{verbose} > 1;
        }
    }

    $cmd .= '_post';
    if (main->can($cmd)) {
        no strict qw/refs/;  ## no critic
        $cmd->($max);
    }

    return;
}

{
    my $total = 0;
    my $projects = 0;
    my $small = 0;
    my $big = 0;
    my %order;
    my @natural;
    sub stats {
        my ($vcs, $dir) = @_;
        $total    ||= 0;
        $projects ||= 0;
        $small    ||= 0;
        $big      ||= 0;

        chdir $dir;
        my @v = @{ $vcs->log($dir) };
        my $up2date = $vcs->uptodate($dir) ? ' ' : '*';
        my $colour
            = @v > $option{big} ? 'green'
            : @v < $option{min} ? 'red bold'
            :                     '';
        if ( $option{ordered} ) {
            $order{ sprintf "    %5d %s%s\n", (scalar @v), $up2date, colored( $dir, $colour ) } = { modified => 1, count => scalar @v };
        }
        elsif ( $option{natural} ) {
            push @natural, { count => (scalar @v), up2date => $up2date, dir => $dir };
        }
        else {
            printf "    %5d %s%s\n", (scalar @v), $up2date, colored( $dir, $colour );
        }

        if ( @v > $option{min} ) {
            $total += @v;
            $projects++;
        }
        else {
            $small++;
        }
        $big++ if @v > $option{big};
    }

    sub stats_post {
        my ($vcs, $dir) = @_;

        if (%order) {
            print join '', sort { $order{$a}{count} <=> $order{$b}{count} } keys %order;
        }
        elsif (@natural) {
            my $avg   = ( sum map { $_->{count} } @natural ) / @natural;
            my $stdev = 0;
            for my $proj (@natural) {
                next if $proj == $natural[0] || $proj == $natural[-1];
                $stdev += ( $proj->{count} - $avg ) ** 2;
            }

            $stdev    = sqrt( $stdev / @natural );
            $option{min} = $avg - $option{natural} * $stdev;
            $option{big} = $avg + $option{natural} * $stdev;
            warn "Standard deviation is larger than the average\n" if $stdev > $avg;
            warn "(avg = $avg, std dev = $stdev)\n" if $option{verbose} || $stdev > $avg;

            $small    = sum map { $_->{count} < $avg - $option{natural} * $stdev ? 1 : 0 } @natural;
            $big      = sum map { $_->{count} > $avg + $option{natural} * $stdev ? 1 : 0 } @natural;
            $projects = @natural - $small;
            $total    = sum map { $_->{count} < $avg - $option{natural} * $stdev ? 0 : $_->{count} } @natural;

            for my $proj (sort { $a->{count} <=> $b->{count} } @natural) {
                my $colour
                    = $proj->{count} > $option{big} ? 'green'
                    : $proj->{count} < $option{min} ? 'red bold'
                    :                                 '';
                printf "    %5d %s%s\n", $proj->{count}, $proj->{up2date}, colored( $proj->{dir}, $colour );
            }
        }

        print "Total revisions $total\n";
        printf "Average revisions per project = %.1f\n", ( $projects ? $total / $projects : 0 );
        printf "Project by sizes: (%i)\n", $projects + $small;
        printf "  Small:  %d\n", $small;
        printf "  Medium: %d\n", $projects - $big;
        printf "  Large:  %d\n", $big;
    }
}

{
    my $total = 0;
    sub pull {
        my ($vcs, $dir) = @_;

        print "\tPulling $dir\n";
        if ( my ( $host, $sub ) = $dir =~ m{^ssh:// ( [^:]+ ) : (.*) }xms ) {
            `ssh $host 'cd $dir; git pull origin master'`;
        }
        else {
            $vcs->pull($dir);
        }
        $total++;
    }

    sub pull_post {
        my ($vcs, $dir) = @_;

        $total ||= 0;
        print "$total projects successfully updated\n";
    }
}

{
    my $total = 0;
    sub push {
        my ($vcs, $dir) = @_;

        print "\tPushing $dir\n";
        chdir $dir;
        if ( $option{tags} && -d '.git' ) {
            system 'git push origin master --tags'
                or $total++;
        }
        else {
            $vcs->push($dir);
            $total++;
        }
    }

    sub push_post {
        my ($vcs, $dir) = @_;

        print "$total projects successfully pushed\n";
    }
}

sub status {
    my ($vcs, $dir) = @_;

    print "\tstatusing $dir\n";
    $vcs->status($dir);
}

{
    my ($pass, $fail) = (0, 0);
sub test {
    my ($vcs, $dir, $max) = @_;

    $ENV{TEST_AUTHOR} = 1 if $option{author};
    local $CWD = $dir;

    return if !-d 't';

    my $opt = '';
    if (-d 'lib') {
        $opt = '-Ilib';
    }

    my $cmd = "prove $opt t";
    print "Testing $dir";
    my $success = system "$cmd > /dev/null 2> /dev/null";

    if ($success != 0) {
        $cmd = "TEST_AUTHOR=1 $cmd" if $option{author};
        print "\n\tTests Failed!\n";
        print "\t\$ cd $dir\n";
        print "\t\$ $cmd\n";
        $fail++;
    }
    else {
        print ' ' x ($max - length $dir) . " OK\n";
        $pass++;
    }
}

    sub test_post {
        my $total = $pass + $fail;
        my $BOLD = BOLD;
        my $RESET = RESET;
        print <<"TESTS";

${BOLD}Summary$RESET\:
Total  $total
Failed $fail
Passed $pass
TESTS
    }
}

{
    my ($mod, $web);
sub html {
    my ($vcs, $dir, $max) = @_;
    $mod ||= '';
    $web ||= '';

    my ($module) = $dir =~ m{^ $ENV{HOME} / src / (.+) }xms;

    if ($module) {
        my $package = $module;
        my ($letter) = $module =~ /^(\w)/xms;
        $module =~ s{-}{::}gxms;
        $mod .= <<"HTML";
        <tr>
            <td>$module</td>
            <td>
                <a href="http://www.cpantesters.org/distro/$letter/$package.html">CPANTS</a>
                <a href="http://cpants.perl.org/dist/kwalitee/$package">Kwalitee</a>
            </td>
            <td><a href="file://$dir">$dir</a></td>
            <td><a href="http://search.cpan.org/~ivanwills/$package/">http://search.cpan.org/~ivanwills/$package/</a></td>
        </tr>
HTML
    }
    else {
    }
}

sub html_post {
    print "Modules:\n$mod\n";
}
}

sub install {
    my ($vcs, $dir) = @_;
    chdir $dir;

    my $skipping = '';
    $skipping = "Catalyst Project" if grep {!/META/} glob "$dir/*.yml";
    $skipping = "No Build script" if !(-f "$dir/'Makefile.PL" || -f "$dir/Build.PL");

    if ($skipping) {
        print "\tSkipping   $dir ($skipping)\n";
        return;
    }

    print "\tInstalling $dir\n";
    if ( "$dir/Build.PL" ) {
        `./Build distclean 2> /dev/null` if -f "$dir/Build";
        `perl Build.PL 2> /dev/null; ./Build 2> /dev/null; ./Build install 2> /dev/null`;
    }
    else {
        `make distclean 2> /dev/null` if -f "$dir/Makefile";
        `perl Makefile.PL 2> /dev/null; make 2> /dev/null; make install 2> /dev/null`;
    }
}

{
    sub rebuild {
        my ($vcs, $dir) = @_;

        if ( $dir =~ m{/www/} ) {
            print "Skipping $dir\n";
            return;
        }

        chdir $dir;
        print "Building $dir\n";
        print {*STDERR} "  Pulling ...";
        $vcs->pull($dir);
        if ( -x 'Build' ) {
            `./Build distclean >/dev/null 2>/dev/null`;
        }
        elsif ( -e 'Makefile' ) {
            `make distclean >/dev/null 2>/dev/null`;
        }

        print {*STDERR} "\n  Building ...";
        if ( -e 'Build.PL' ) {
            `perl Build.PL distclean >/dev/null 2>/dev/null`;
        }
        elsif ( -e 'Makefile.PL' ) {
            `perl Makefile.PL >/dev/null 2>/dev/null`;
        }

        print {*STDERR} "\n  Building ...";
        if ( -x 'Build' ) {
            `./Build >/dev/null 2>/dev/null`;
        }
        elsif ( -e 'Makefile' ) {
            `make >/dev/null 2>/dev/null`;
        }

        if ( defined $option{test} && !$option{test} ) {
            print {*STDERR} "\n  Testing ...";
            my $failed;
            if ( -x 'Build' ) {
                $failed = system "./Build test >/dev/null 2>/dev/null";
            }
            elsif ( -e 'Makefile' ) {
                $failed = system "make test >/dev/null 2>/dev/null";
            }
            if ($failed) {
                print {*STDERR} " Failed!\n";
                return;
            }
        }

        print {*STDERR} "\n  Installing ...";
        if ( -x 'Build' ) {
            `sudo ./Build install >/dev/null 2>/dev/null`;
        }
        elsif ( -e 'Makefile' ) {
            `sudo make install >/dev/null 2>/dev/null`;
        }

    }
}

sub stashed {
    my ($vcs, $dir, $max) = @_;
    if ( -d dir($dir, '.git') ) {
        chdir $dir;
        my @stash = `git stash list`;
        printf "\t%-${max}s - %2i\n", $dir, scalar @stash;
    }
    else {
        print "\t$dir - not git\n";
    }
}

__DATA__

=head1 NAME

pull-everything - Perform an action on many repositories

=head1 VERSION

This documentation refers to pull-everything version 0.1.

=head1 SYNOPSIS

   everything cmd [option]

 COMMANDS:
  pull           Pull in all remote changes
  push           Push any local changes to remote repos
  stats          Get version controll stats (ie commits) for each repo
  test           Run all test
  status         Check the status of each repo
  install        Build and install all projects
  rebuild        Pull in any changes and rebuild and install all projects
  stashed        Find all projects with stashed changes

 OPTIONS:
  -a --author    Run the author tests when used with the test command
  -m --min=int   The minimum number of commits to not be considered small (Default 2)
  -b --big=int   The number of commits for a project to be considered big (Defaul 100)
  -c --config=file
                 Use "file" for the configuration file rather than ~/.everything.rc
  -o --ordered   Show the projects in order from smallest to largets
  -n --natural=float
                 Decide on small and large sizes based on float standard deviations

  -v --verbose   Show more detailed option
     --VERSION   Prints the version information
     --help      Prints this help information
     --man       Prints the full documentation for pull-everything



=head1 DESCRIPTION

A full description of the module and its features.

May include numerous subsections (i.e., =head2, =head3, etc.).


=head1 SUBROUTINES/METHODS

A separate section listing the public components of the module's interface.

These normally consist of either subroutines that may be exported, or methods
that may be called on objects belonging to the classes that the module
provides.

Name the section accordingly.

In an object-oriented module, this section should begin with a sentence (of the
form "An object of this class represents ...") to give the reader a high-level
context to help them understand the methods that are subsequently described.

=head1 DIAGNOSTICS

A list of every error and warning message that the module can generate (even
the ones that will "never happen"), with a full explanation of each problem,
one or more likely causes, and any suggested remedies.

=head1 CONFIGURATION AND ENVIRONMENT

A full explanation of any configuration system(s) used by the module, including
the names and locations of any configuration files, and the meaning of any
environment variables or properties that can be set. These descriptions must
also include details of any configuration language used.

=head1 DEPENDENCIES

A list of all of the other modules that this module relies upon, including any
restrictions on versions, and an indication of whether these required modules
are part of the standard Perl distribution, part of the module's distribution,
or must be installed separately.

=head1 INCOMPATIBILITIES

A list of any modules that this module cannot be used in conjunction with.
This may be due to name conflicts in the interface, or competition for system
or program resources, or due to internal limitations of Perl (for example, many
modules that use source code filters are mutually incompatible).

=head1 BUGS AND LIMITATIONS

A list of known problems with the module, together with some indication of
whether they are likely to be fixed in an upcoming release.

Also, a list of restrictions on the features the module does provide: data types
that cannot be handled, performance issues and the circumstances in which they
may arise, practical limitations on the size of data sets, special cases that
are not (yet) handled, etc.

The initial template usually just has:

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2009 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
