#!/usr/bin/perl

# Created on: 2016-08-22 08:08:45
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Term::ANSIColor qw/colored/;

our $VERSION = 0.001;
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    out     => undef,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'line|n=i',
        'column|c=i',
        'position|p=i',
        'before|BEFORE|B=i',
        'after|AFTER|A=i',
        'context|CONTEXT|C=i',
        'line_no|lines|l',
        'ends|e',
        'quiet|silent|q',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        warn 'a';
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        warn 'b';
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    if ( $option{position} ) {
        $option{before} ||= 10;
        $option{after} ||= 10;
    }
    elsif ( ! defined $option{line} ) {
        $option{line} = shift @ARGV // pod2usage( -verbose => 1 );
    }

    if (!@ARGV) {
        push @ARGV, '-';
    }
    my $file_count = 0;

    for my $file (@ARGV) {
        my $fh;

        if ( ( @ARGV > 1 || $option{verbose} ) && ! $option{quiet} ) {
            print "\n" if $file_count++ > 0;
            print "==> $file <==\n";
        }

        if ($file eq '-') {
            $fh = \*STDIN;
        }
        else {
            open $fh, '<', $file or die "Can't open '$file' for reading! $!\n";
        }

        about($fh, %option);
    }

    return;
}

sub about {
    my ($fh, %option) = @_;
    if ( $option{position} ) {
        local $/ = undef;
        my $text = <$fh>;
        my $length = ($option{before} || $option{context}) + ($option{after} || $option{context});
        my $start = $option{position} - ($option{before} || $option{context});
        if ($start < 0) {
            $start = 0;
        }

        my $selection = substr $text, $start, $length;
        print "$selection\n";
        return;
    }

    my $start     = ( $option{column} || $option{line} ) - ( $option{before} || $option{context} || 0 );
    my $end       = ( $option{column} || $option{line} ) + ( $option{after}  || $option{context} || 0 );
    my $line_no   = 0;
    my $last_line = $option{column} ? $option{line} : $end;
    my $max       = length $end;
    my @end;

    while (my $line = <$fh>) {
        $line_no++;

        if ( $line_no == $option{line} && ( $start != $option{line} || $end != $option{line} ) ) {
            $line = colored ['bold'], $line;
        }
        elsif ( $option{ends} && $line_no <= $start ) {
            print $line;
        }

        if ($option{ends}) {
            push @end, $line;
            if (@end > $end * 2) {
                @end = @end[@end - $end -1 .. @end - 1];
            }
        }
        else {

            # stop processing after last line of interest
            last if $line_no > $last_line;
        }

        if ( $option{column} ) {
        }
        else {
            # is the line in the range to display?
            if ($start <= $line_no && $line_no <= $end) {
                if ($option{line_no}) {
                    printf "%${max}d: %s", $line_no, $line;
                }
                else {
                    print $line;
                }
            }
        }
    }
    if ($option{ends}) {
        if ( abs($start) + $end + ( $option{line} ? 1 : 0 ) >= $line_no ) {
            $end = $line_no - abs($start) - ( $option{line} ? 1 : 0 );
        }
        else {
            print "...\n";
        }
        if (@end > $end) {
            @end = @end[@end - $end .. @end - 1];
        }
        print @end;
    }

    return;
}

__DATA__

=head1 NAME

about - Show the text of a file about a line (similar to head or tail)

=head1 VERSION

This documentation refers to about version 0.001

=head1 SYNOPSIS

   about [option] line_no [file ...]
   about (--line|-l line) [(--before|-B) num] [(--after|-A) num] [(--context|-C) num] [file ...]

 OPTIONS:
  line_no       Short hand form of --line
  file          The file (or files) to show the about line. If not file is
                passed STDIN is assumed and a file of '-' explicitly looks
                at STDIN.
  -l --line[=]int
                The line number of interest
  -n --lines    Show the line numbers of each line
  -B --before[=]int
                Show this number of lines before the line of interest
  -A --after[=]int
                Show this number of lines after the line of interest
  -C --context[=]int
                Show this number of lines either side of the line of interest

  -q --quiet or --silent
                never print headers giving file names
  -v --verbose  always print headers giving file names
     --version  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for about

  eg:
    # show the 22nd line from STDIN
    about 22
    # show lines 310 to 318 of my-file
    about -l 314 -C 4 my-file
    about 314 -B4 -A4 my-file

=head1 DESCRIPTION

The C<about> command is like C<head> and C<tail> but show a line with a file
rather than just the begging or end of a file.

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2016 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
