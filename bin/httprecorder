#!/usr/bin/env perl

# Created on: 2010-09-06 15:15:34
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util qw/sum/;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use HTTP::Proxy;
use HTTP::Recorder;
use Path::Class;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    port    => 3128,
    record  => 1,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

my %proxy_loglevels = (
    NONE    => 2 ** 0,
    PROXY   => 2 ** 1,
    STATUS  => 2 ** 2,
    PROCESS => 2 ** 3,
    SOCKET  => 2 ** 4,
    HEADERS => 2 ** 5,
    FILTERS => 2 ** 6,
    DATA    => 2 ** 7,
    CONNECT => 2 ** 8,
    ENGINE  => 2 ** 9,
    ALL     => 2 ** 10,
    A       => sum map { 2 ** $_ } 0 .. 10,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'out|o=s',
        'port|p=i',
        'log|l=s@',
        'record|r!',
        'header_file|header-file|f=s',
        'header|h=s%',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);
    #my $file = join ' ', @ARGV;

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $proxy = HTTP::Proxy->new( port => $option{port} );
    print "Running proxy on localhost:$option{port} (Proxy $HTTP::Proxy::VERSION Recorder $HTTP::Recorder::VERSION)\n";

    if ( $option{header} || $option{header_file} ) {
        $proxy->push_filter(
            mime     => 'text/html',
            response => Recorder::HeaderFilter->new( file => $option{header_file}, headers => $option{header} ),
        );
    }

    if ($option{record}) {

        # create a new HTTP::Recorder object
        my $agent = new HTTP::Recorder;

        if ($option{out}) {
            # set the log file (optional)
            $agent->file($option{out});
            print "Logging to $option{out}\n";
        }
        else {
            print "Logging to '/tmp/scriptfile'\n";
        }

        # set HTTP::Recorder as the agent for the proxy
        $proxy->agent( $agent );
    }

    # set the proxy port
    if ( $option{port} ) {
        $proxy->port($option{port});
    }

    # set log level if required
    if ( $option{log} ) {
        $proxy->logmask( sum map { exists $proxy_loglevels{$_} ? $proxy_loglevels{$_} : $_ } @{ $option{log} } );
    }

    # start the proxy
    $proxy->start();

    return;
}

# filter to add SSO headers
package Recorder::HeaderFilter;

use strict;
use warnings;
use Path::Class;
use base qw/HTTP::Proxy::HeaderFilter Class::Accessor::Fast/;

__PACKAGE__->mk_accessors( qw{file file_date file_headers headers} );

sub filter {
    my ( $self, $headers, $message) = @_;
    warn 'filtering headers';

    my %headers = $self->get_headers();

    for my $header ( keys %headers ) {
        $message->headers->header( $header => $headers{$header} );
    }
}

sub get_headers {
    my ( $self ) = @_;

    $self->file_date(0)     if !$self->file_date;
    $self->file_headers({}) if !$self->file_headers;
    $self->headers({})      if !$self->headers;

    if ( $self->file ) {
        my @stat = stat $self->file;
        if ( $stat[9] > $self->file_date ) {
            my $headers = file($self->file)->slurp;
            my %headers = map { split /\s*=\s*/, $_, 2 } grep {!/^#/ && !/^\s*$/ } split /\s*\r?\n/, $headers;
            $self->file_headers(\%headers);
        }
    }

    return ( %{ $self->file_headers }, %{ $self->headers } );
}

1;

__DATA__

=head1 NAME

httprecorder - Starts a proxy that is able to record all the actions you
perform in the broswer.

=head1 VERSION

This documentation refers to httprecorder version 0.1.

=head1 SYNOPSIS

   httprecorder [option]

 OPTIONS:
  -o --out[=]string  The file that will contain all the recorded HTTP actions.
  -p --port[=]int    The port to listen on (Default 3128)
     --no-record     Turn off the recording and just start the proxy server.
  -h --header key=val
                     Specify headers to add to requests
  -f --file str      Use this file which contains key=val paris on new lines
                     (blank lines and lines starting with # are ignored)

  -v --verbose       Show more detailed option
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for httprecorder

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2010 Ivan Wills (123 Timbuc Too).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
