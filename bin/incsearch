#!/usr/bin/perl

# Created on: 2012-05-07 14:35:24
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Class;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    out     => undef,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'out|o=s',
        'verbose|v+',
        'man',
        'help',
        'version',
    ) or pod2usage(2);

    if ( $option{'version'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my %modules;

    for my $part (@ARGV) {
        my $file = $part;
        $file =~ s{::}{/}g;

        for my $path (@INC) {
            next if !-d $path;
            my @possibles = map { -d $_ ? dir($_) : file($_) } glob "$path/$file*";
            next if ! @possibles;

            print "$path\n" if $option{verbose} == 1;

            while ( my $possible = shift @possibles) {
                if ( -d $possible ) {
                    push @possibles, $possible->children;
                }
                elsif ( $possible =~ /[.]p(?:m|od)$/ ) {
                    my ($module) = $possible =~ /^$path\/(.*)[.]p(?:m|od)$/;
                    $module =~ s{/}{::}g;
                    push @{ $modules{$module} }, $possible;
                }
            }
        }
    }
    print "\n" if $option{verbose} == 1;
    if ( $option{verbose} > 1 ) {
        for my $mod (sort keys %modules ) {
            print "$mod\n";
            print "\t", join "\n\t", @{ $modules{$mod} };
            print "\n";
        }
    }
    else {
        print join "\n", ( sort keys %modules ), '';
    }

    return;
}

__DATA__

=head1 NAME

incsearch - Searches the perl @INC path for matching modules

=head1 VERSION

This documentation refers to incsearch version 0.1.

=head1 SYNOPSIS

   incsearch [option] module

 OPTIONS:
  module        The module you are interested in (may be a file name or
                path name)

  -v --verbose  Used once shows the @INC paths that modules are found in,
                used twice shows the actual files found
     --VERSION  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for incsearch

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2012 Ivan Wills (14 Mullion Close Hornsby Heights).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
