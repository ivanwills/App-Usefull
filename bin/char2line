#!/usr/bin/perl

# Created on: 2011-12-29 09:45:45
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Class;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    out     => undef,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'position|p=i',
        'context|c=i',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);
    $option{position} ||= shift @ARGV;

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }
    elsif ( !defined $option{'position'} ) {
        warn "No position specified!\n";
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $str = file( shift @ARGV )->slurp;
    my $pos = substr $str, 0, $option{position};
    my @lines = split /\n/, $pos;
    my $lines = @lines + 1;
    my $character = @{ [ split //, $lines[-1] ] };

    print "Character $option{position} is approximatly line $lines column $character\n";

    if ( defined $option{context} ) {
        @lines = split /\n/, $str;
        $lines--;
        print join "\n", @lines[ $lines - $option{context} .. $lines + $option{context} ], '';
    }

    return;
}

__DATA__

=head1 NAME

char2line - Converts charictor position to line position for a file

=head1 VERSION

This documentation refers to char2line version 0.1.

=head1 SYNOPSIS

   char2line pos file
   char2line file --position pos

 OPTIONS:
  -p --position[=]int
                The charicter position of interest in the file

  -v --verbose  Show more detailed option
     --version  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for char2line

=head1 DESCRIPTION

This script helps with debugging when file processors give only character
offset positions not line numbers which is what most text editors report.

=head1 SUBROUTINES/METHODS

Name the section accordingly.

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2011 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
