#!/usr/bin/perl

# Created on: 2012-12-07 08:09:58
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    sort    => 'num',
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'one-file-system|x',
        'sort|s=s',
        'reverse|r',
        'total|t!',
        'verbose|v+',
        'man',
        'help',
        'version',
    ) or pod2usage(2);

    if ( $option{'version'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my @dirs = map { "\"$_\"" } ( @ARGV ? @ARGV : ('.') );
    my $cmd = 'du -bs';
    $cmd .= ' --one-file-system' if $option{'one-file-system'};

    warn "$cmd " . (join ' ', @dirs) . "\n" if $option{verbose};
    my @stats = map {[ split /\s+/, $_, 2 ]} map {`$cmd $_`} @dirs;

    @stats = sort {
            $option{sort} eq 'alpha' ? $a->[1] cmp $b->[1]
            : $option{sort} eq 'num' ? $a->[0] <=> $b->[0]
            :                          0
        }
        @stats;

    @stats = reverse @stats if $option{reverse};

    my $total = 0;
    for (@stats) {
        my ($number, $dir) = @$_;
        $total += $number;

        print size($number) . "\t$dir";
    }

    if ($option{total}) {
        print "\n" . size($total) . "\tTOTAL\n";
    }

    return;
}

sub size {
    my ($number) = @_;

return $number < 1000          ? $number
     : $number < 100_000       ? sprintf("%.1fK",$number/1000)
     : $number < 1_000_000     ? sprintf("%.0fK",$number/1000)
     : $number < 100_000_000   ? sprintf("%.1fM",$number/1_000_000)
     : $number < 1_000_000_000 ? sprintf("%.0fM",$number/1_000_000)
     :                           sprintf("%.1fG",$number/1_000_000_000);
}

__DATA__

=head1 NAME

duhs - Sorted du -hs

=head1 VERSION

This documentation refers to duhs version 0.1.

=head1 SYNOPSIS

   duhs [option] [dire_or_file ...]

 OPTIONS:
  -r --reverse  Reverse the order of the output
  -s --sort[=](num|alpha)
                Sort the directories by size (num) or name (alpha) (Default num)
  -t --total    Show the total sizes for all files
  -x --one-file-system
                Only show usage for one filesystem, don't switch to other filesystems

  -v --verbose  Show more detailed option
     --VERSION  Prints the version information
     --help     Prints this help information
     --man      Prints the full documentation for duhs

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

may arise, practical limitations on the size of data sets, special cases that
are not (yet) handled, etc.

The initial template usually just has:

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2012 Ivan Wills (14 Mullion Cl, NSW, Australia).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
