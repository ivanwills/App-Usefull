#!/usr/bin/perl

# Created on: 2025-03-03 09:16:02
# Create by:  ivanwills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Tiny;
use Class::Date qw/now/;

our $VERSION = 0.001;
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    out     => undef,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

my %subs = map { $_ => $_ } qw/find diff/;

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'out|o=s',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $sub = $subs{$ARGV[0]};
    if ($sub) {
        shift @ARGV;
    }

    if ($sub eq 'find') {
        find(@ARGV ? @ARGV : ('.'));
        return;
    }

    my $now = now->strftime('%Y-%m-%d-%H-%M');
    for my $file (@ARGV) {
        if ( !-f $file) {
            warn "$file doesn't exist, skipping\n";
            next;
        }
        warn "Moving $file to $file-$now\n";
        path($file)->copy("$file-$now");
        system 'git', 'checkout', $file;
    }

    return;
}

sub find {
    my @dirs = @_;
    while ( @dirs ) {
        my $file = shift @dirs;
        if ( -d $file ) {
            push @dirs, path($file)->children;
        } elsif ($file =~ /-\d{4}(-\d{2}){4}/) {
            print "$file\n";
        }
    }
}

__DATA__

=head1 NAME

git out-of-way - Move files out of the way for git actions

=head1 VERSION

This documentation refers to bin/git-out-of-way version

=head1 SYNOPSIS

   git out-of-way file ...
   git out-of-way find [dir...]

 OPTIONS:
  find               Find any previously moved files

  -v --verbose       Show more detailed option
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for bin/git-out-of-way

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to ivanwills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

ivanwills - (ivanwills@localhost)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2025 ivanwills (123 Timbuc Too).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
