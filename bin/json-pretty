#!/usr/bin/perl

# Created on: 2015-06-29 11:40:18
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Tiny;
use JSON::XS;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;
my $coder;

my %option = (
    indent  => '  ',
    newline => "\n",
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'depth|d=i',
        'exclude|e=s@',
        'indent|i=s',
        'newline|n=s',
        'string_length|string-length|s=i',
        'test|t!',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    if ( $option{indent} eq '\t' ) {
        $option{indent} = "\t";
    }
    if ( $option{newline} eq '\n' ) {
        $option{newline} = "\n";
    }

    my $file = @ARGV ? path($ARGV[0]) : '';
    eval {
        my $json = $file ? decode_json(scalar $file->slurp) : decode_json(join '', <ARGV>);
        $coder = JSON::XS->new->ascii->pretty->allow_nonref;

        print out($json), "\n";
        1;
    } or do {
        die 'Error in parsing ' . ($file ? $file : 'STDIN') . "!:\n $@";
    };

    return;
}

sub out {
    my ($json, $indent, $depth, $path) = @_;
    my $out = '';
    $indent ||= '';
    $depth ||= 0;
    $path ||= '';

    return '...' if $option{depth} && $depth >= $option{depth};
    return '...' if $option{exclude} && grep {$_ eq $path} @{ $option{exclude} };

    if ( !ref $json ) {
        my $js = $coder->encode($json);
        if ( $option{string_length} && length $js > $option{string_length} ) {
            my $first = int($option{string_length}/2) - 2;
            my $last = int($option{string_length}/2 + 0.5) - 1;
            $js = substr($js, 0, $first) . '...' . substr($js, -$last, length $js);
        }
        $out .= $js;
    }
    elsif (ref $json eq 'HASH') {
        if ( %$json ) {
            $out .= "{$option{newline}";
            $out .= "//$path$option{newline}" if $option{test} && $path;
            $path &&= "$path.";
            for my $key ( sort keys %$json ) {
                $out .= qq/$indent$option{indent}"$key": / . out($json->{$key}, "$indent$option{indent}", $depth + 1, "$path$key") . ",$option{newline}";
            }
            chop $out;
            chop $out;
            $out .= "$option{newline}$indent}";
        }
        else {
            $out .= "{}";
        }
    }
    elsif (ref $json eq 'ARRAY') {
        if (@$json) {
            $out .= "[$option{newline}";
            $out .= "//$path$option{newline}" if $option{test} && $path;
            for my $i (0 .. @$json - 1) {
                my $val = $json->[$i];
                $out .= qq/$indent$option{indent}/ . out($val, "$indent$option{indent}", $depth + 1, "$path\[$i]") . ",$option{newline}";
            }
            chop $out;
            chop $out;
            $out .= "$option{newline}$indent]";
        }
        else {
            $out .= "[]";
        }
    }
    else {
        $out = $coder->encode($json);
    }

    chomp $out;

    return $out;
}

__DATA__

=head1 NAME

json-pretty - Pretty print and order JSON data

=head1 VERSION

This documentation refers to json-pretty version 0.0.1

=head1 SYNOPSIS

   json-pretty [option] < file.json
   get json | json-pretty [option]

 OPTIONS:
  -d --depth[=]int  Show results to this maximum depth
  -i --indent[=]str The string to indent with (default 2 spaces)
  -n --newline[=]str The string to add a newline (default \n)

  -v --verbose      Show more detailed option
     --version      Prints the version information
     --help         Prints this help information
     --man          Prints the full documentation for json-pretty

=head1 DESCRIPTION

Most JSON checkers/pretty printers don't guarentee (as per the JSON standard)
the order of the out putted JSON object fields, I<json-pretty> does it will
ASCII order the fileds names making it easy for JSON configs to be stored in
version controll systems. This can also be useful for humans to review the
returned structures.

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2015 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
