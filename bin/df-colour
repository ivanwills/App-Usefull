#!/usr/bin/env perl

# Created on: 2009-04-15 06:53:23
# Create by:
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Term::ANSIColor qw/:constants/;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    out     => undef,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);
sub sorter;

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'sort|s=s',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }


    # do stuff here
    my $df  = '/bin/df';
    my $cmd = "$df -k " . join ' ', @ARGV;
    my @out = `$cmd`;
    my @lines;
    my %max;

    for my $line (@out) {
        chomp $line;
        my ($fs, $size, $used, $avaiable, $percentage, $mount) = split /\s+/, $line, 6;
        my ($percent) = $percentage =~ /^(\d+)/;

        my $colour =
              !$percent       ? RESET
            : $percent == 100 ? RED ON_YELLOW
            : $percent >= 90  ? BOLD RED
            : $percent >= 80  ? BOLD YELLOW
            :                   RESET;

        push @lines, {
            fs         => $fs,
            Size       => num_format($size),
            Used       => num_format($used),
            Available  => num_format($avaiable),
            size       => $size,
            used       => $used,
            available  => $avaiable,
            percentage => $percentage,
            mount      => $mount,
            colour     => $colour,
        };
        for my $key (keys %{ $lines[-1] }) {
            $max{$key} = length $lines[-1]{$key} if !$max{$key} || $max{$key} < length $lines[-1]{$key};
        }
    }

    $lines[0]{colour} = BOLD;
    $lines[0]{Size} = 'Size';
    print_line(shift @lines, \%max);
    for my $line (sort sorter @lines) {
        print_line($line, \%max);
    }

    return;
}

sub print_line {
    my ($line, $max) = @_;

    print $line->{colour};
    print $line->{fs}, ' ' x ($max->{fs} - length $line->{fs}), ' ';
    print ' ' x ($max->{Size}       - length $line->{Size}      ), $line->{Size}      , ' ';
    print ' ' x ($max->{Used}       - length $line->{Used}      ), $line->{Used}      , ' ';
    print ' ' x ($max->{Available}  - length $line->{Available} ), $line->{Available} , ' ';
    print ' ' x ($max->{percentage} - length $line->{percentage}), $line->{percentage}, ' ';
    print $line->{mount} . RESET . "\n";
}

sub sorter {
    return 0 if !$option{sort};
    return
          $option{sort} eq 'size'       ? $a->{size}       <=> $b->{size}
        : $option{sort} eq 'used'       ? $a->{used}       <=> $b->{used}
        : $option{sort} eq 'available'  ? $a->{available}  <=> $b->{available}
        : $option{sort} eq 'percentage' ? $a->{percentage} <=> $b->{percentage}
        :                                 0;
}

sub num_format {
    my ($number) = @_;
    return $number !~ /^\d+%?$/      ? $number
        : $number * 1_000 < 1000             ? $number
        : $number * 1_000 < 100_000          ? sprintf("%.1fK",$number * 1_000 / 1000)
        : $number * 1_000 < 1_000_000        ? sprintf("%.0fK",$number * 1_000 / 1000)
        : $number * 1_000 < 100_000_000      ? sprintf("%.1fM",$number * 1_000 / 1_000_000)
        : $number * 1_000 < 1_000_000_000    ? sprintf("%.0fM",$number * 1_000 / 1_000_000)
        : $number * 1_000 < 100_000_000_000  ? sprintf("%.1fG",$number * 1_000 / 1_000_000_000)
        : $number * 1_000 < 1000_000_000_000 ? sprintf("%.0fG",$number * 1_000 / 1_000_000_000)
        :                                      sprintf("%.1fT",$number * 1_000 / 1_000_000_000_000);
}

__DATA__

-a, --all
-B, --block-size=SIZE
-h, --human-readable
-H, --si
-i, --inodes
-k     like --block-size=1K
-l, --local
--no-sync
-P, --portability
--sync invoke sync before getting usage info
-t, --type=TYPE
-T, --print-type
-x, --exclude-type=TYPE
-v     (ignored)
--help display this help and exit
--version

=head1 NAME

df-colour - Show df colour highlighting filesystems with low space

=head1 VERSION

This documentation refers to df-colour version 0.1.

=head1 SYNOPSIS

   df-colour [option]

 OPTIONS:
  -o --other         other option

  -v --verbose       Show more detailed option
     --VERSION       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for df-colour

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to  ().

Patches are welcome.

=head1 AUTHOR

 - ()

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2009 Ivan (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
