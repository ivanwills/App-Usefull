#!/usr/bin/perl

# Created on: 2010-08-30 09:02:49
# Create by:  dev
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util qw/sum/;
use List::MoreUtils qw/zip/;
use Getopt::Alt qw/get_options/;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Class;
use Text::CSV_XS;
use Class::Date qw/now/;
use Term::ANSIColor;
use YAML::Syck;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;
my $file     = file( $ENV{HOME} . "/.$name" );

use constant {
    HOUR   => 60 * 60,
    MINUTE => 60,
};
my %option = (
    fmt         => '%10day %6start %3lunch %6end %12avg %10total',
    history     => undef,
    work_day    => 8,
    lunch_break => 30,
    bin         => 15,
    verbose     => 0,
    man         => 0,
    help        => 0,
    VERSION     => 0,
);
my %labels = (
    stddev => [ 'Standard Deviation', 'StdDev' ],
    avg    => [ 'Average to Date', 'Avg to Date', 'Avg' ],
    day    => [ qw/Date / ],
    total  => [ 'Day Length', 'Total' ],
    days   => [ qw/Days / ],
    lunch  => [ qw/Lunch  Lch / ],
    end    => [ qw/Finish End / ],
    start  => [ qw/Start / ],
);

main();
exit 0;

sub main {

    my $opt = get_options(
        {
            default => \%option,
            helper  => 1,
            bundle  => 1,
        },
        [
            'history|h=i',
            'all|a+',
            'now|n=s',
            'between|b=s',
            'full|f',
            'work_day|w=f',
            'lunch_bread|l=f',
            'round|r=i',
            'bin|i=i',
            'fmt|format|m=s',
            'verbose|v+',
        ]
    ) or pod2usage(2);
    %option = %{ $opt->opt };
    $option{work_day} *= HOUR;
    $option{lunch_break} *= MINUTE;

    # small all set the history to 20 days
    if ( $option{all} ) {
        if ( $option{all} == 1 ) {
            $option{history} = 20;
            $option{all}     = 0;
        }
        elsif ( $option{all} == 2 ) {
            $option{history} = 365;
            $option{all}     = 0;
        }
    }

    $option{all} = 1 if $option{between};
    $option{history} ||= 5 if !$option{all};

    my $action = shift @ARGV || '';

    my $tmp
        = $action eq 'add'   ? add()
        : $action eq 'stats' ? stats()
        :                      list();

    return $tmp;
}

sub add {

    my $csv = get_csv();
    my $date;
    my @rewrite;
    while ( my $fields = get_fields() ) {
        next if !$fields->[0] || $fields->[0] eq '';
        push @rewrite, $fields;

        $date = $fields->[0];
    }

    my $now = $option{now} ? Class::Date->new( $option{now} ) || Class::Date->new( now()->strftime('%Y-%m-%d ') . $option{now} ) : now();
    open my $fh, '>', $file or die "Could not open $file for reading: $OS_ERROR\n";
    for my $i ( 0 .. @rewrite - 2 ) {
        $csv->combine(@{ $rewrite[$i] });
        print {$fh} $csv->string . "\n";
    }

    if ($date eq $now->strftime('%Y-%m-%d')) {
        $csv->combine(@{ $rewrite[-1] }, $now->strftime('%H:%M'));
        print {$fh} $csv->string . "\n";
    }
    else {
        $csv->combine(@{ $rewrite[-1] });
        print {$fh} $csv->string . "\n";
        $csv->combine($now->strftime('%Y-%m-%d'), $now->strftime('%H:%M'));
        print {$fh} $csv->string . "\n";
    }
    close $fh;

    return;
}

sub list {

    my ($lines) = get_records();

    my ($start, $end) = split /:/, $option{between} || '', 2;
    $start = $start ? Class::Date->new($start) : undef;
    $end   = $end   ? Class::Date->new($end)   : undef;

    my $now    = now();
    my $grand = 0;
    my $count = 0;
    my $last;
    my $total;
    my $day_parts;
    my $previous;
    my @times;

    if ( $option{verbose} ) {
        print "Date            ";
        if ( $option{verbose} > 1 ) {
            print "Start  Lch Finish";
            if ( $option{verbose} > 2 ) {
                print "   Avg to Date ";
            }
            else {
                print "       ";
            }
        }
        print "Day Length\n";
    }
    #my %yaml = ( times => [] );
    my @headings = @{[qw/date in start finish out/]};


    RECORD:
    while ( my ( $row, $line_no ) = get_fields() ) {
        next RECORD if !$option{all} && $line_no + $option{history} - 1 < $lines;

        my @fields = @$row;
        my $date = shift @fields;
        my $day = Class::Date->new($date);
        next RECORD if $start && $day < $start;
        next RECORD if $end   && $day > $end;
        #push @{ $yaml{times} }, { zip @headings, @{$row} };

        $total = Class::Date::Rel->new(0);
        $day_parts = @fields;

        for ( my $i = 0; $i < @fields; $i += 2 ) {
            last RECORD if $option{full} && !$fields[$i + 1];
            my $start = round( Class::Date->new("$date " . $fields[$i]), 0 );
            my $end = round( defined $fields[$i + 1] ? Class::Date->new("$date " . $fields[$i + 1]) : $now, 1 );
            $fields[$i  ] = $start->strftime('%H:%M');
            $fields[$i+1] = $end->strftime('%H:%M');

            $total += $end - $start;
        }

        push @times, $total;
        $grand += $total;
        $count++;

        if ( $option{verbose} ) {
            my $day = Class::Date->new($date);
            if ( $previous && ( $option{all} || $option{history} > 5 ) && ($day - $previous)->day > 1 ) {
                print "\n";
            }

            my $avg = $grand / $count;
            my $Hour = $total / HOUR;
            my $colour
                = $Hour >= 8.5 ? 'green'
                : $Hour <  7   ? 'red'
                : $Hour <  7.8 ? 'yellow'
                :                '';
            $colour
                .= $total < $avg - 5 * MINUTE ? ' underline'
                :  $total > $avg + 5 * MINUTE ? ' bold'
                :                            '';
            my ($hour, $min, $sec) = time_parts($total);
            print "$date";

            if ( $option{verbose} > 1 ) {
                if ( @fields == 4 || @fields == 3 ) {
                    my $mins = sprintf "%3d", int ( (round(Class::Date->new("$date $fields[2]"), 1) - round(Class::Date->new("$date $fields[1]")) ) / MINUTE );
                    $fields[3] ||= now()->strftime('%H:%M');
                    print "\t$fields[0]  $mins $fields[-1] ";
                }
                elsif ( @fields == 2 ) {
                    my $mins = sprintf "%3d", int ( (round(now(), 1) - round(Class::Date->new("$date $fields[1]"))) / MINUTE );
                    print "\t$fields[0]  $mins       ";
                }
                else {
                    print "\t$fields[0]            ";
                }
                #print "\t(" . ( join "\t", @fields ) . ')';

                if ( $option{verbose} > 2 ) {
                    my ($hour, $min) = time_parts($avg);
                    print "    $hour\:$min    "
                }
            }

            print "\t" . colored( "$hour:$min", $colour ) . "\n";
            $previous = $day;
        }

        $last = $day if !$last || $last < $day;
    }
    return if !$count;

    my $avg = $grand / $count;
    my ($hour, $min, $sec) = time_parts($avg);
    print "Average: $hour:$min:$sec (for $count days)\n";

    if ( !$option{full} && ( $last->year == $now->year && $last->month == $now->month && $last->day == $now->day ) ) {
        my $one_day = $option{work_day};

        my $spare =  $one_day * int $avg / $option{work_day};
        my $left = $one_day - ( $avg - $spare );
        my $hour_8pm = $now->clone;
        $hour_8pm += (20 - $hour_8pm->hour) * HOUR;

        if ( $left > 0 && $now + $left < $hour_8pm ) {
            $left += $option{lunch_break} if $now->hour < 13;
            my ($hour, $min, $sec) = time_parts($left);
            print "Leave in $hour:$min:$sec\n";
            my $leave = $now + $left;
            print "         " . $leave->meridiam . "\n";
            if ($spare) {
                $spare /= $one_day;
                print "Spare:   $spare day" . ($spare > 1 ? 's' : '') . "\n";
            }
        }
        else {
            print "Leave now\n";
        }
        if ( $day_parts < 3 ) {
            $total -= $option{lunch_break};
        }
        if ( $total < $one_day ) {
            my $left = now() + Class::Date::Rel->new( $one_day - $total );
            print "Leave at " . $left->meridiam . " for 8 hour day\n";
        }
    }
    if ( $option{verbose} ) {
        my $stddev = sum map { ( $_ - $avg ) ** 2 } @times;
        $stddev = sqrt $stddev / @times;
        my ($hour, $min, $sec) = time_parts($stddev);
        print "The standard deviation is $hour\:$min\:$sec\n";
    }

    #my $yml = file($ENV{HOME}, '.hours.yml');
    #my $fh = $yml->openw;
    #print {$fh} Dump(\%yaml);

    return;
}

sub round {
    my ( $date, $down ) = @_;

    return $date if !$option{round};

    my $out = "$date ";
    my $round = abs $option{round};
    if ( $option{round} < 0 ) {
        $down = $date->min % $round < $round / 2;
    }

    if ( $date->min % $round != 0 ) {
        if ( $down ) {
            # Round down
            my $diff = ( $date->min % $round ).'m';
            $date = $date - $diff;
        }
        else {
            # round up
            my $diff = ( $round - ($date->min + $round) % $round ).'m';
            $date = $date + $diff;
        }
    }
    #warn "$down .. $out => $date\n";

    return $date;
}

sub stats {
    my $stats = raw_stats( $option{history} );
    my $last;

    print colored( sprinthead(), 'bold' ), "\n";
    my $days = 0;
    for my $day ( @{ $stats } ) {
        print "\n" if $last && $day->{day} > $last->{day} + '1D';
        $days += $day->{days};

        my $hour = $day->{total} / HOUR;
        my $work_day = $day->{days} == 1 ? $option{work_day} : $option{work_day} / 2;
        my $colour
            = $hour >= $work_day * 8.5 / 8 / HOUR ? 'green'
            : $hour <  $work_day * 7 / 8   / HOUR ? 'red'
            : $hour <  $work_day * 7.8 / 8 / HOUR ? 'yellow'
            :                                               '';
        $colour
            .= $day->{total} < $day->{avg} - $day->{stddev} ? ' underline'
            :  $day->{total} > $day->{avg} + $day->{stddev} ? ' bold'
            :                                                 '';
        print sprintday( $option{fmt}, { total => $colour }, %$day ), "\n";

        $last = $day;
    }

    print "\n";
    print "Average      : " . time_str( $last->{avg}, 1 ) . " (for $days days)\n";
    print "Std Deviation: " . time_str($last->{stddev}, 1) . "\n";

    my $lunch = !$last->{lunch} ? $option{lunch_break} : 0;

    if ( ! $last->{end} || $last->{end} eq now()->strftime('%H:%M') ) {
        my $total = $last->{total} - $lunch;
        if ( $total < $option{work_day} ) {
            my $day = sprintf "%.1f", $option{work_day} / HOUR;
            $day =~ s/[.]0$//xms;
            print "For $day hour day\n";
            print "Leave at:      " . ( ( now() - $total + $option{work_day} )->meridiam ) . "\n";
            print "               " . time_str( ( $option{work_day} ) - $total, 1 ) . "\n";
        }
    }

    my $hours = $last->{avg} % $option{work_day};
    if ( $stats->[-2]{avg} > $last->{total} + $lunch ) {
        my $till = $stats->[-2]{avg} - $last->{total} + $lunch;
        print "For average day\n";
        print "Leave at:      " . (now() + $till)->meridiam . "\n";
        print "               " . time_str( $till, 1 ) . "\n";
    }
    else {
        print "For average day leave now\n";
    }

    if ( $last->{avg} < $option{work_day} ) {
        #my $till = ( $option{work_day} - $last->{avg} ) * @{ $stats } + $lunch;
        my $till = ( $option{work_day} - $last->{avg} ) * $days + $lunch;
        # TODO work out how to make this the correct value (currently it's too small
        #my $till = ( $option{work_day} - $last->{total} ) + $lunch;
        print "For minimum day to average at workday length\n";
        print "Leave at:      " . (now() + $till)->meridiam . "\n";
        print "               " . time_str( $till, 1 ) . "\n";
    }

    $days  = ( $last->{avg} - $option{work_day} ) * $days / $option{work_day};
    if ( $days > 1 || $option{verbose} ) {
        #$days = $option{verbose} ? sprintf "%0.1f", $days : int $days;
        $days =  sprintf "%0.$option{verbose}f", $days;
        my $day = $days == 1 ? '' : 's';
        print "You have $days day$day in overtime\n";
    }

    if ( $option{verbose} > 1 ) {
        my %bin;
        for my $stat (@{ $stats }) {
            $bin{ time_trunc( $stat->{total}, $option{bin} ) }++;
        }
        print "\nTime  : Num days worked for that long\n";
        for my $key ( sort { $a <=> $b } keys %bin ) {
            printf "%s : %3i\n", time_str($key), $bin{$key};
        }
    }
}

sub sprinthead {
    my @parts = split /%(\d*\w+)/, $option{fmt};
    my $fmt   = shift @parts;
    my $out   = '';
    my $data  = 1;

    while ( my $part = shift @parts ) {
        if ( $data ) {
            my ($size, $type) = $part =~ /^(\d*)(.*)$/xms;
            my $label;
            for my $type_label ( @{ $labels{$type} } ) {
                if ( $size && $size >= length $type_label ) {
                    $label = $type_label;
                    last;
                }
            }
            $label ||= $labels{$type}[-1];
            if ( $size && $size < length $label ) {
                $size = length $label;
            }
            $size ||= '';
            $out .= sprintf "%${size}s", $label;
            $fmt .= "%$size$type";
        }
        else {
            $out .= $part;
            $fmt .= $part;
        }
        $data = !$data;
    }

    $option{fmt} = $fmt;
    return $out;
}

sub sprintday {
    my ($fmt, $meta, %day) = @_;
    $meta ||= {};
    $day{day}    = $day{day}->ymd('-');
    $day{end}  ||= '';
    $day{avg}    = time_str($day{avg});
    $day{total}  = time_str($day{total});
    $day{stddev} = time_str($day{stddev});

    my @args;
    $fmt =~ s/%(\d*)(\w+)/sprintday_part( $1, $meta->{$2}, $day{$2}, $2 )/egxms;

    return $fmt;
}

sub sprintday_part {
    my ( $size, $colour, $value, $type ) = @_;
    my $out = '';

    if ($size) {
        $out .= ' ' x ( $size - length $value );
    }
    if ( $type eq 'lunch' && !$value ) {
        $out .= ' ';
    }

    $out
        .= $colour ? colored( $value, $colour )
        :            $value || '';

    return $out;
}

sub raw_stats {
    my ($records) = @_;
    my @stats;
    my ($lines) = get_records();

    my ($start, $end) = split /:/, $option{between} || '', 2;
    $start = $start ? Class::Date->new($start) : undef;
    $end   = $end   ? Class::Date->new($end)   : undef;
    my $today = Class::Date->new( now->strftime('%Y-%m-%d') );
    my $days = 0;

    my $now    = now();

    RECORD:
    while ( my ( $row, $line_no ) = get_fields() ) {
        next RECORD if ( !$option{all} && !$option{between} ) && $line_no + $option{history} - 1 < $lines;

        my @fields = @$row;
        my $date = shift @fields;
        my $day = Class::Date->new($date);
        next RECORD if $start && $day < $start;
        next RECORD if $end   && $day > $end;

        my $total = Class::Date::Rel->new(0);

        for ( my $i = 0; $i < @fields; $i += 2 ) {
            last RECORD if $option{full} && !$fields[$i + 1];
            my $start = round( Class::Date->new("$date " . $fields[$i]), 0 );
            my $end = round( defined $fields[$i + 1] ? Class::Date->new("$date " . $fields[$i + 1]) : $now, 1 );
            $fields[$i  ] = $start->strftime('%H:%M');
            $fields[$i+1] = $end->strftime('%H:%M');

            $total += $end - $start;
        }

        my $lunch
            = @fields == 4 || @fields == 3   ? int ( (round(Class::Date->new("$date $fields[2]"), 1) - round(Class::Date->new("$date $fields[1]")) ) / MINUTE )
            : @fields == 2 && $day ne $today ? 'N/A'
            : @fields == 2                   ? int ( (round(now(), 1) - round(Class::Date->new("$date $fields[1]"))) / MINUTE )
            :                                  undef;

        push @stats, {
            day   => $day,
            total => $total,
            start => $fields[0],
            end   => @fields == 2 && $day ne $today ? $fields[1] : $fields[3],
            lunch => $lunch,
        };

        # TODO improve these calculations so that they don't make things too slow
        $days += $stats[-1]{days}   = @fields <= 2 && $day != $today ? 0.5 : 1;
        #my $avg    = ( sum map { $_->{total} } @stats ) / @stats;
        my $avg    = ( sum map { $_->{total} } @stats ) / $days;
        my $stddev = sum map { ( $_->{total} - $avg ) ** 2 } @stats;
        #$stats[-1]{stddev} = sqrt $stddev / @stats;
        $stats[-1]{stddev} = sqrt $stddev / $days;
        $stats[-1]{avg}    = $avg;
    }

    if ( $records && $records < @stats && $option{all} < 2 ) {
        @stats = @stats[ -$records .. -1 ];
    }

    return \@stats;
}

sub time_parts {
    my ($time) = @_;
    my $hour = int $time / HOUR;
    my $min  = int $time / MINUTE;
    my $sec  = int $time - $min * MINUTE;
    $min -= $hour * MINUTE;
    $hour = "0$hour" if $hour < 10;
    $min  = "0$min"  if $min  < 10;
    $sec  = "0$sec"  if $sec  < 10;
    return ($hour, $min, $sec);
}

sub time_str {
    my ($time, $show_sec) = @_;
    my ($hour, $min, $sec) = time_parts($time);

    return $show_sec ? "$hour\:$min\:$sec" : "$hour\:$min";
}

sub time_trunc {
    my ( $time, $min ) = @_;

    my ($h, $m, $s) = time_parts($time);

    $m -= $m % $min;

    return $h * 60 * 60 + $m * 60;
}

{
    my ( $csv, $fh );
    sub get_fields {
        init();

        my $fields = $csv->getline($fh);
        if ( !$fields ) {
            close $fh;
            return;
        }

        return wantarray ? ( $fields, $fh->input_line_number ) : $fields;
    }

    sub get_csv {
        init();
        return $csv;
    }

    sub get_records {
        return `wc -l $file` =~ /(\d+)/xms;
    }

    sub init {
        if ( !$csv ) {
            open $fh, '<', $file or die "Could not open $file for reading: $OS_ERROR\n";
            $csv = Text::CSV_XS->new ({ binary => 1 });
        }
    }
}

__DATA__

=head1 NAME

hours - Track the hours worked

=head1 VERSION

This documentation refers to hours version 0.1.

=head1 SYNOPSIS

   hours list [--history=... | --all [--all] || ]
   hours add [--now=...]

 OPTIONS:
  -h --history=int Count of the number days in to the past to go to
  -a --all         Show the last month if specified once if specified twice shows all dates
  -n --now=date    Use this date if
  -f --full        When listing only count full days/completed days
  -b --between=[date1][:date2]
                   Show hours worked between the dates specified
                   if no second date specified shows dates after that date
                   if no first date (ie :date) show only entries before that date
  -r --round=int   Round to int minutes for start and finish times
  -m --format=str  Sets the format for displaying the data, see --man for details
                   (Default '%10day %6start %3lunch %6end %12avg %10total')

  -v --verbose     Show more detailed option
     --version     Prints the version information
     --help        Prints this help information
     --man         Prints the full documentation for hours

=head1 DESCRIPTION

=head2 Format

=head3 Fields

=over 4

=item day

The work day the record is about

=item lunch

The length of time spent at lunch

=item start

The time at which you started work

=item end

The time at which you left work

=item avg

The rolling average for the displayed period

=item total

The total hours worked

=item days

Weather the day is a full day (1) or a half day (0.5)

=item stddev

The standard deviation

=back

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2010 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW, Australia, 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
