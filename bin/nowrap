#!/usr/bin/perl

# Created on: 2018-06-26 14:48:57
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use Term::Size::Perl;

our $VERSION = 0.001;
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'start|s=i',
        'max|m=i',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my @files = @ARGV ? @ARGV : ('-');
    my $file_count = 0;

    if ( ! defined $option{max} ) {
        ($option{max}) = Term::Size::Perl::chars *STDOUT{IO};
        $option{max} ||= 80;
    }

    FILE:
    for my $file (@files) {
        my $fh;

        if ( ( @ARGV > 1 || $option{verbose} ) && ! $option{quiet} ) {
            print "\n" if $file_count++ > 0;
            print "==> $file <==\n";
        }

        if ($file eq '-') {
            $fh = \*STDIN;
        }
        else {
            open $fh, '<', $file or do {
                warn "Can't open '$file' for reading! $!\n";
                next FILE;
            };
        }

        while (my $line = <$fh>) {
            my $end = chomp $line;

            if ( $option{start} ) {
                if ( length $line > $option{start} ) {
                    $line = substr $line, $option{start}, length $line;
                }
                else {
                    $line = '';
                }
            }

            if ( length $line > $option{max} ) {
                $line = substr $line, 0, $option{max};
            }

            print $line, $end ? $INPUT_RECORD_SEPARATOR : '';
        }
    }

    return;
}

__DATA__

=head1 NAME

nowrap - Show only enough of a line that will fit on the screen

=head1 VERSION

This documentation refers to nowrap version 0.001

=head1 SYNOPSIS

   nowrap [--max|-m num] [--start|-s num] file1 (file2 ...)

 OPTIONS:
  -m --max[=]int    The maximum line length, defaults to terminal with or
                    80 columns if that can't be determined
  -s --start[=]int  Start the output from this column (Default 0)

  -v --verbose       Show more detailed option
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for nowrap

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2018 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
