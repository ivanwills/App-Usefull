#!/usr/bin/perl

# Created on: 2013-09-13 07:30:44
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Carp qw/carp croak cluck confess longmess/;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Class;
use Term::ANSIColor qw/colored/;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    out     => undef,
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'line|l=i',
        'context|C=i',
        'before|B=i',
        'after|A=i',
        'files|f!',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }
    elsif ( !$option{line} ) {
        warn "No line specified!\n";
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    if (@ARGV) {
        files($_) for @ARGV;
    }
    elsif ( $option{files} ) {
        files($_) while $_ = <STDIN>;
    }
    else {
        lines(\*STDIN)
    }

    return;
}

sub files {
    my ($file) = @_;
    confess "No File\n" if !$file;
    print "====> $file <====\n";

    return lines(file($file)->openr);
}

sub lines {
    my ($fh) = @_;
    my @before;
    my $line   = $option{line};
    my $before = $option{before} ? $option{before} : $option{context} ? $option{context} : 0;
    my $after  = $option{after } ? $option{after } : $option{context} ? $option{context} : 0;
    my $width  = length ($line + $after);

    while (<$fh>) {
        if ( $fh->input_line_number() < $line && $before ) {
            push @before, $_;
            shift @before if @before > $before;
        }
        elsif ( $fh->input_line_number() == $line ) {
            for (@before) {
                print colored( sprintf("%${width}d: ", $line - $before--), 'blue');
                print $_;
            }
            print colored( sprintf("%${width}d: ", $line ), 'red');
            print $_;
            last if !$after;
        }
        elsif ( $fh->input_line_number() > $line && $after ) {
            print colored( sprintf("%${width}d: ", ++$line ), 'blue');
            print $_;
            last if !--$after;
        }
    }

    return;
}

__DATA__

=head1 NAME

lines - Script to show file line number context

=head1 VERSION

This documentation refers to lines version 0.0.1

=head1 SYNOPSIS

   lines [option] [files]
   cmd | lines [option]
   cmd | lines [option] (--files|-f)

 OPTIONS:
  -l --line[=]int  The line number you wish to diaplay
  -C --context[=]int
                    Display int lines of context around the --line of interest
  -B --before[=]int
                    Display int lines before the --line of interest
  -A --after[=]int  Display int lines after the --line of interest
  -f --files        Treat STDIN as a list of files

  -v --verbose      Show more detailed option
     --version      Prints the version information
     --help         Prints this help information
     --man          Prints the full documentation for lines

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2013 Ivan Wills (14 Mullion Cl, NSW Australia).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
