#!/usr/bin/perl

# Created on: 2014-02-04 07:14:40
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Class;
use YAML::Syck qw/LoadFile DumpFile/;
use XML::Simple qw/XMLin/;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    config  => "$ENV{HOME}/.pom-checker",
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'init|initialise|initialise|i',
        'config|c=s',
        'test_repo|t',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    if ($option{test_repo}) {
        test_repo();
        return;
    }
    if ($option{init}) {
        init();
        return;
    }
    if ( !-s $option{config} ) {
        die "Please run '$0 --initialise' first\n";
    }

    my $dir = dir('.')->absolute->resolve;
    my $config = LoadFile($option{config});

    my %file = map { chomp $_; $_ => 1 } `git diff --cached --name-only`;

    warn "Checking for POM\n";
    if ( $file{'pom.xml'} ) {
        my $pom = XMLin('pom.xml');
        my $version = $pom->{version};
        if ( $config->{$dir}{$version} ) {
            warn <<"WARN";
ERROR POM Version is already used in the branch $config->{$dir}{$version}!
ERROR Check that out.
WARN
            exit 1;
        }
    }

    return;
}

sub init {
    my $config = {};
    if ( -s $option{config} ) {
        $config = LoadFile($option{config});
    }

    my @branches =
        map  {chomp; s{^ [*]? \s+ (?: remotes/ )? }{}xms; $_}
        grep {!/HEAD/}
        `git branch -a`;

    my $dir = dir('.')->absolute->resolve;

    for my $branch (@branches) {
        if ( $branch =~ m{/(.*)} ) {
            system "git checkout $1";
        }
        else {
            system "git checkout $branch";
        }

        # check that the pom file is in the branch
        next if !-f 'pom.xml';

        my $pom = XMLin('pom.xml');
        $config->{$dir}{$pom->{version}} = $branch;
    }

    DumpFile($option{config}, $config);

    return;
}

sub test_repo {

    mkdir "test_repo";
    chdir "test_repo";
    system "git init";

    for my $i ( 1 .. 10 ) {
        if ( $i != 1 ) {
            warn "Checking out master $i" if $i != 1;
            system "git checkout master" if $i != 1;
            system "git checkout -b branch_$i";
        }

        for my $type ( '-SNAPSHOT', '' ) {
            my $ver = "$i.0$type";
            file('pom.xml')->spew(<<"POM");
<project
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example.test.pom.repository</groupId>
    <artifactId>repository</artifactId>
    <version>$ver</version>
    <packaging>pom</packaging>
    <name>Test-Repository</name>

</project>
POM
            system "git add pom.xml";
            system "git commit -m 'Adding pom.xml version $ver'";
        }
    }

    return;
}

__DATA__

=head1 NAME

pom-checker - Check Maven POM file uses a version that is unique accross git branches

=head1 VERSION

This documentation refers to pom-checker version 0.0.1

=head1 SYNOPSIS

   pom-checker [option]

 OPTIONS:
  -o --other         other option

  -v --verbose       Show more detailed option
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for pom-checker

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2014 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
