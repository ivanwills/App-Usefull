#!/usr/bin/perl

# Created on: 2014-01-16 04:14:31
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use v5.10;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Time::Piece;

our $VERSION = 0.001;
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    format      => 'test',
    max_history => 1,
    verbose     => 0,
    man         => 0,
    help        => 0,
    VERSION     => 0,
);

main();
exit 0;

sub main {
    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'tag|t=s',
        'branch|b=s',
        'format|f=s',
        'quick|q!',
        'cgit|c=s',
        'branch_age|branch-age|a',
        'age_limit|age-limit|l=s',
        'max_history|max-history|h=i',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    if ($option{branch_age}) {
        return branch_age();
    }

    my @releases = $option{tag} || ( !$option{branch} && $ENV{UP_TO_DATE_TAG} ) ? tag_commit() : branch_commit();

    warn "Branch : $releases[-1]{name}\nSHA    : $releases[-1]{sha}\nTime   : $releases[-1]{time}\n\n" if $option{verbose};

    $option{all} = 1 if $option{format} eq 'test';

    my $csv = branches_contain(@releases);
    if ($option{verbose}) {
        warn @$csv . " branches found\n";
    }

    if ( $option{format} eq 'text' ) {
        my @max = (0,0);
        for my $row (@$csv) {
            $max[0] = length $row->[0] if $max[0] < length $row->[0];
            $max[1] = length $row->[1] if $max[1] < length $row->[1];
        }
        for my $row (@$csv) {
            printf "%$max[0]s %$max[1]s %s\n", @$row;
        }
    }
    elsif ( $option{format} eq 'csv' || $option{format} eq 'tab' ) {
        my $sepperator = $option{format} eq 'tab' ? "\t" : ',';
        for my $row (@$csv) {
            print +(join $sepperator, @$row), "\n";
        }
    }
    elsif ( $option{format} eq 'json' ) {
        require JSON::XS;
        my $repo = `git config remote.origin.url`;
        chomp $repo;
        print JSON::XS::encode_json({
            repository => $repo,
            release    => $releases[-1]{name},
            date       => '' . localtime,
            branches   => [
                map {{ status => $_->[0], name => $_->[1], last_author => $_->[2] }}
                @$csv
            ]
        });
    }
    elsif ( $option{format} eq 'html' ) {
        my $sepperator = "</td><td>";
        my $date       = localtime;
        my $repo       = `git config remote.origin.url`;
        chomp $repo;
        print <<"HTML";
<doctype>
<html>
<head>
    <title>Branch status for $repo</title>
    <link rel="stylesheet" type="text/css" href="style.css" />
    <script type="text/javascript" href="script.js"></script>
</head>
<body>
    <h1>Branch statuses for <i>$repo</i> ($date)</h1>
    <table>
        <thead>
            <tr>
                <th>Production Branch/Tag Status</th>
                <th>Branch Name</th>
                <th>Last commit owner</th>
            </tr>
        </thead>
HTML

        for my $row (@$csv) {
            my ($name, $email) = $row->[2] =~ /^<([^>]+)>(.*)$/;
            $row->[0] = $row->[0] eq $releases[-1]{name} ? $row->[0] : qq{<span class="old">$row->[0]</span>};
            $row->[2] = $row->[0] eq $releases[-1]{name} ? $name : qq{<a href="mailto:$email?subject=$row->[1]%20is%20out%20of%20date">$name</a>};
            if ($option{cgit}) {
                my ($branch) = $row->[1] =~ m{^[^/]+/(.+)$}xms;
                $row->[1] = qq[<a href="$option{cgit}/log/?h=$branch" title="cgit log">$branch</a>];
            }
            print "<tr><td>" . (join $sepperator, @$row), "</td></tr>\n";
        }

        print <<"HTML";
    </table>
</body>
</html>
HTML
    }
    elsif ( $option{format} eq 'test' ) {
        require Test::More;
        Test::More->import( tests => scalar @$csv );
        for my $row (@$csv) {
            is( $row->[0], $releases[-1]{name}, $row->[1] . ' is upto date');
        }
        Test::More::done_testing();
    }

    return;
}

sub alphanum_sort {
    my $A = $a;
    $A =~ s/(\d+)/sprintf "%06i", $1/egxms;
    my $B = $b;
    $B =~ s/(\d+)/sprintf "%06i", $1/egxms;

    return $A cmp $B;
}

sub branches_contain {
    my @releases = @_;
    my @branches = git_branches();
    my $format = q/--format=format:'%H %at <%an>%ae'/;
    my @csv;

    BRANCH:
    for my $branch (@branches) {
        open my $pipe, '-|', "git log $format -n 1 '$branch'";
        my ($first, $author, $found, $release);

        LOG:
        while (my $log = <$pipe>) {
            chomp $log;
            my ($sha, $time, $user) = split /\s+/, $log, 3;

            $first  = $time;
            $author = $user;
            if ( $time < $releases[-1]{time} ) {
                warn "skipping $branch\n" if $option{verbose} > 1;
                next BRANCH;
            }
        }

        RELEASE:
        for my $released (reverse @releases) {
            next RELEASE if !$released->{branches}{$branch};

            $release = $released->{name};
            last RELEASE;
        }

        next BRANCH if !$option{all} && !$option{verbose} && $found;

        push @csv, [ $release || "missing $releases[-1]{name}", $branch, $author ];
        warn +( $found ? 'up to date' : "missing $releases[-1]{name}" ) . "\t$branch\t$author\n" if $option{quick};
    }

    return \@csv;
}

sub tag_commit {
    $option{tag} ||= $ENV{UP_TO_DATE_TAG} || 'master';
    my @tags = sort alphanum_sort
        grep {/$option{tag}/}
        map {chomp; $_}
        `git tag`;

    my $oldest = @tags > $option{max_history} ? -$option{max_history} : -scalar @tags;
    return map { sha_from_show($_) } @tags[ $oldest .. -1 ];
}

sub git_branches {
    my ($contains) = @_;
    state @branches;

    if ($contains) {
        return (
            sort alphanum_sort
            map {/^\s+(.*?)\s*$/xms}
            grep {!/HEAD/}
            `git branch -r --contains $contains`
        );
    }
    elsif (!@branches) {
        @branches = sort alphanum_sort
            map {/^\s+(.*?)\s*$/xms}
            grep {!/HEAD/}
            `git branch -r`;
    }

    return @branches;
}

sub branch_commit {
    $option{branch} ||= $ENV{UP_TO_DATE_BRANCH} || 'master';
    my @branches = grep {/$option{branch}/} git_branches();

    my $oldest = @branches > $option{max_history} ? -$option{max_history} : -scalar @branches;
    return map { sha_from_show($_) } @branches[ $oldest .. -1 ];
}

sub sha_from_show {
    my ($name) = @_;
    my $format = q/--format=format:'%H %at'/;
    my ($log) = grep {/^[0-9a-f]+\s+\d{10}$/xms} `git show $format $name`;
    chomp $log;
    my ($sha, $time) = split /\s+/, $log;
    return {
        name     => $name,
        sha      => $sha,
        time     => $time,
        branches => { map { $_ => 1 } git_branches($sha) },
    };
}

sub branch_age {
    my @branches = git_branches();
    my $format = q/--format=format:'%H %at <%an>%ae'/;
    my $before = $option{age_limit} || Time::Piece->new->ymd;
    my %bin;

    BRANCH:
    for my $branch (@branches) {
        open my $pipe, '-|', "git log $format -n 1 '$branch'";
        my ($first, $author, $found);

        my $log = <$pipe>;
        chomp $log;
        my ($sha, $time, $user) = split /\s+/, $log, 3;
        $time = Time::Piece->new($time)->ymd;

        # skip branches that have been modified after before
        next BRANCH if $time gt $before;
        printf "%-70s %-99s %s\n", $branch, $user, $time, $time gt $before;
        $bin{$time}++;
    }
    #print join "\n", map {"$_\t$bin{$_}"} sort keys %bin;
    #print "\n";

    return;
}

__DATA__

=head1 NAME

git-up-to-date - Check that git branches include latest production branch/tag

=head1 VERSION

This documentation refers to git-up-to-date version 0.0.1

=head1 SYNOPSIS

   git-up-to-date [option]

 OPTIONS:
  -t --tab[=]str    Specify a tag that any branch with newer commits must contain
  -b --branch[=]str Similarly a branch that other branches with newer commits must
                    contain (Default origin/master)
  -f --format[=](test|text|html|csv|tab)
                    Set the out put style
                      * test - TAP format output (default)
                      * text - formatted text
                      * html - HTML page
                      * csv  - comma seperated values format file
                      * tab  - tab seperated values format file
  -c --cgit[=]url   When using --format=html this creates a link to the cgit log page for the branch
  -q --quick        Print to STDERR the statuses as they are found (no formatting)
  -m --max-history[=]int
                    Set the maximum number of release branches/tags to go back (if more than one)
                    to find where a branch was created from. (Default 1)

  -v --verbose       Shows changed branches that are upto date.
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for git-up-to-date

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2014 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
