#!/usr/bin/env perl

# Created on: 2011-06-23 14:04:56
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
use List::MoreUtils qw/uniq/;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Class;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    verbose => 0,
    man     => 0,
    help    => 0,
    VERSION => 0,
);

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'server|s=s',
        'auto|a=s',
        'current|c=s',
        'test|t!',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }
    elsif ( $option{auto} ) {
        auto($option{auto}) ;
    }
    elsif ( !$option{'server'} ) {
        warn "You must specify --server\n";
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $mode = shift @ARGV;
    return print "ssh -t $option{server} 'reset; devmode $mode'\n" if $option{test};
    return exec "ssh -t $option{server} 'reset; devmode $mode'";
}

sub auto {
    my ($type) = @_;

    if ( $type eq 'ssh' ) {
        my @hosts
            = map {
                s/#.*$//;
                my ($addr, @a) = split /\s+/, $_;
                @a;
            }
            grep {
                !/^\s*$/ && !/^\s*#/
            }
            map {
                s/\n//;
                $_
            }
            file('/etc/hosts')->slurp;
        push @hosts,
            map {
                s/Host\s*//;
                $_;
            }
            grep {
                /^Host /
            }
            map {
                s/\n//;
                $_
            }
            file("$ENV{HOME}/.ssh/config")->slurp;
        print join ' ', uniq sort @hosts;
        exit 0;
    }
    elsif ( $type eq 'full' ) {
        #warn "\nCommand appears ($option{current}):\n";
        #warn join ' ', @ARGV, "\n";
        if ( $option{server} ) {
            my @names
                = grep {
                    !/[.]rc$/
                }
                map {
                    s{^.*/}{};
                    $_;
                }
                split /\n/,
                '' . `ssh $option{server} '/bin/ls -1 ~/.devmode/[^.#]*'`;
            print join ' ', @names;
            exit 0;
        }
    }
    exit 1;

}

__DATA__

=head1 NAME

devremote - Run a remote devmode session

=head1 VERSION

This documentation refers to devremote version 0.1.

=head1 SYNOPSIS

   devremote [option] -s server name

 OPTIONS:
  name               The name of the devmode session to run
  -s --server=str    The name of the server to connect to, may include
                     username@ to login with a particular user.

  -v --verbose       Show more detailed option
     --version       Prints the version information
     --help          Prints this help information
     --man           Prints the full documentation for devremote



=head1 DESCRIPTION

=head2 BASH autocompletion

_devremote() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="--help --man --version --server -v -s"
    if [[ ${cur} == -* && ${COMP_CWORD} -eq 1 ]]; then
        COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
    elif [[ ${prev} == -s* ]]; then
        local hosts=$(devremote -a ssh)
        COMPREPLY=($(compgen -W "${hosts}" -- ${cur}))
    else
        local sonames=$(devremote -a full -c ${COMP_CWORD} -- ${COMP_WORDS[@]})
        COMPREPLY=($(compgen -W "${sonames}" -- ${cur}))
    fi
}
complete -F _devremote devremote

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2011 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW Australia 2077).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
