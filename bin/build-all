#!/usr/bin/env perl

# Created on: 2011-06-24 11:40:56
# Create by:  Ivan Wills
# $Id$
# $Revision$, $HeadURL$, $Date$
# $Revision$, $Source$, $Date$

use strict;
use warnings;
use version;
use Scalar::Util;
use List::Util;
#use List::MoreUtils;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper qw/Dumper/;
use English qw/ -no_match_vars /;
use FindBin qw/$Bin/;
use Path::Class;
use WWW::Mechanize;
use YAML qw/Load LoadFile/;
use Module::CoreList;

our $VERSION = version->new('0.0.1');
my ($name)   = $PROGRAM_NAME =~ m{^.*/(.*?)$}mxs;

my %option = (
    max_tries => 10,
    perl      => '5.008008',
    verbose   => 0,
    man       => 0,
    help      => 0,
    VERSION   => 0,
);
my %count;

if ( !@ARGV ) {
    pod2usage( -verbose => 1 );
}

main();
exit 0;

sub main {

    Getopt::Long::Configure('bundling');
    GetOptions(
        \%option,
        'max_tries|max-tries|m=i',
        'perl|p=f',
        'verbose|v+',
        'man',
        'help',
        'VERSION!',
    ) or pod2usage(2);
    #my $file = join ' ', @ARGV;

    if ( $option{'VERSION'} ) {
        print "$name Version = $VERSION\n";
        exit 1;
    }
    elsif ( $option{'man'} ) {
        pod2usage( -verbose => 2 );
    }
    elsif ( $option{'help'} ) {
        pod2usage( -verbose => 1 );
    }

    # do stuff here
    my $mech = WWW::Mechanize->new;
    my $packages = file( $ENV{HOME}, '.cpan', 'sources', 'modules', '02packages.details.txt.gz' );

    if ( !-f $packages ) {
        system 'cpan 2> /dev/null > /dev/null';
    }

    die "Could not get the packages file '$packages'\n" if !-f $packages;

    my %package_list;
    for my $module ( @ARGV ) {
        add_package( \%package_list, $module, $packages, $mech );
    }

    warn Dumper \%package_list if $option{verbose};
    my @list;
    for my $package ( sort keys %package_list ) {
        generate_build_order( $package, \%package_list, \@list );
    }
    print join "\n", @list, '';

    return;
}

sub generate_build_order {
    my ( $package, $packages, $build_list ) = @_;

    for my $package ( sort keys %{ $packages } ) {
        generate_build_order( $package, $packages->{$package}, $build_list);
        push @{$build_list}, $package if 1 != grep {$package eq $_} @{$build_list};
        die " - ", join "\n - ", grep {$package eq $_} @{$build_list} if 1 < grep {$package eq $_} @{$build_list};
    }

    push @{$build_list}, $package if 1 != grep {$package eq $_} @{$build_list};

    return;
}

sub add_package {
    my ( $list, $module, $packages, $mech ) = @_;

    return if $count{$module}++ > $option{max_tries};

    my $pack = get_details($module, $packages);
    warn Dumper $pack if $option{verbose};
    $list->{$pack->{package}} ||= {};

    my ($meta) = get_meta( $module, $pack, $mech );
    if ( !$meta ) {
        warn "Could not get meta file for $module\n";
        return;
    }

    for my $type (qw/build_requires requires/) {
        for my $require ( keys %{ $meta->{$type} } ) {
            # don't try to get perl
            next if $require eq 'perl';

            # check if the module is a core module and was distributed in a
            # version of perl at or before the required version
            my $version = Module::CoreList->first_release($require);
            next if $version && $version <= $option{perl};

            add_package( $list->{$pack->{package}}, $require, $packages, $mech );
        }
    }

    return;
}

sub get_meta {
    my ( $module, $pack, $mech ) = @_;
    my $meta = file( $ENV{TMP} || '/tmp', "$pack->{package}-$pack->{pack_ver}.yml");

    if ( !-f $meta ) {
        warn $pack->{meta_url} if $option{verbose} > 1;
        eval { $mech->get($pack->{meta_url}) };
        warn $@ if $@;
        return if $@;

        # write the file for future use
        my $fh = $meta->openw;
        print {$fh} $mech->content;
        close $fh;

        return Load($mech->content);
    }

    return Load(scalar $meta->slurp);
}

sub in_list {
    my ( $list, $module ) = @_;

    for my $key ( keys %$list ) {
        return 1 if $key eq $module;
        my $ans = in_list( $list->{$key}, $module );

        return 1 if $ans;
    }

    return 0;
}

my %modules;
sub get_module_versions {
    my ($packages) = @_;
    open my $fh, '-|', "zcat $packages" or die "Could not read $packages: $!\n";

    while ( my $line = <$fh> ) {
        my ($module, $version, $auth_path, $auth, $package, $pack_ver)
            = $line =~ m{^([\w:]+) \s+ ([^s]+) \s+ ( \w/\w\w/(\w+) )/ ([\w-]+) - ([\d.]+) [.]tar[.]gz $}xms;
        next if !$module;

        warn "Found $module again!\n" if $modules{$module};
        $modules{$module} = {
            module    => $module,
            version   => $version,
            package   => $package,
            auth_path => $auth_path,
            auth      => $auth,
            pack_ver  => $pack_ver,
            meta_url  => "http://search.cpan.org/src/$auth/$package-$pack_ver/META.yml",
        };
    }

    return;
}

sub get_details {
    my ($module, $packages) = @_;
    get_module_versions($packages) if !%modules;

    die "Could not find the module $module\n" if !$modules{$module};

    return $modules{$module};
}

__DATA__

=head1 NAME

build-all - Creates a build list of modules for a package by following all
of the packages dependencies.

=head1 VERSION

This documentation refers to src/home/bin/build-all version 0.1.

=head1 SYNOPSIS

   src/home/bin/build-all [option]

 OPTIONS:
  -m --max-tries[=]int
                   Don't try to get module dependencies if already add
                   --max-tries in the past
  -p --perl[=]num  This the perl version targeted

  -v --verbose     Show more detailed option
     --version     Prints the version information
     --help        Prints this help information
     --man         Prints the full documentation for src/home/bin/build-all

=head1 DESCRIPTION

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION AND ENVIRONMENT

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.

Please report problems to Ivan Wills (ivan.wills@gmail.com).

Patches are welcome.

=head1 AUTHOR

Ivan Wills - (ivan.wills@gmail.com)

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2011 Ivan Wills (14 Mullion Close, Hornsby Heights, NSW, Australia).
All rights reserved.

This module is free software; you can redistribute it and/or modify it under
the same terms as Perl itself. See L<perlartistic>.  This program is
distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut
